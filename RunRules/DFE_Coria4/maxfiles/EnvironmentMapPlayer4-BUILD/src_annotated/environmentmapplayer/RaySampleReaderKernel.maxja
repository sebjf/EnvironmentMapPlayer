    LUTs     FFs   BRAMs    DSPs : RaySampleReaderKernel.maxj
    5965   13909       4       7 : resources used by this file
   1.73%   2.01%   0.20%   0.44% : % of available
   3.46%   5.79%   0.31%   7.78% : % of total used
   5.13%   9.24%   0.70%   7.78% : % of user resources

                                 : package environmentmapplayer;
                                 : 
                                 : import java.util.ArrayList;
                                 : import java.util.List;
                                 : 
                                 : import maxvideo.VideoCounter;
                                 : 
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
                                 : 
                                 : public class RaySampleReaderKernel extends Kernel {
                                 : 
                                 : 	private static final DFEType dfefloat = dfeFloat(8, 24);
                                 : 
                                 : 	protected RaySampleReaderKernel(KernelParameters parameters) {
                                 : 		super(parameters);
                                 : 
                                 : 		flush.disabled();
                                 : 
                                 : 		optimization.pushPipeliningFactor(0.25);
                                 : 
      67      67       0       0 : 		VideoCounter counters = new VideoCounter(this, VideoCounter.Scope.ActiveOnly);
                                 : 		DFEVar col = counters.x.cast(dfeInt(32));
                                 : 		DFEVar row = counters.y.cast(dfeInt(32));
                                 : 
                                 : 		/* Predict what command was last sent to the memory from the Ray Command Generator kernel upstream, and thus the offset into the data word
                                 : 		 * and whether the cache is valid */
                                 : 
                                 : 		int	word_size_in_bytes = RaySampleCommandGeneratorKernel.burstCount * RaySampleCommandGeneratorKernel.burstSizeInBytes;
                                 : 		int word_size_in_bits = word_size_in_bytes * 8;
                                 : 		int bits_per_sample = RaySampleCommandGeneratorKernel.SampleParameters_t.getTotalBits();
                                 : 		float bytes_per_sample = bits_per_sample / 8;
                                 : 		int samples_per_word = (int) Math.floor(word_size_in_bytes / bytes_per_sample);
                                 : 
      32      32       0       2 : 		DFEVar sample_address_in_samples = (row * VideoCounter.displayStandard.H_Active) + col;
                                 : 
                                 : 		DFEVar offset = io.scalarInput("sampleParameterMapAddress", dfeUInt(32));
                                 : 
    1383    1244       4       5 : 		DFEVar sample_address_in_words = KernelMath.floor(sample_address_in_samples.cast(dfefloat) / samples_per_word).cast(dfeUInt(32));
      30      32       0       0 : 		DFEVar sample_address_in_bursts = offset + (sample_address_in_words * RaySampleCommandGeneratorKernel.burstCount);
                                 : 
                                 :         DFEVar previous_address_in_bursts = stream.offset(sample_address_in_bursts, -1);
                                 : 
     328     218       0       0 : 		DFEVar sample_offset_into_word_in_samples = KernelMath.modulo(sample_address_in_samples, samples_per_word);
      18       1       0       0 :         DFEVar cache_valid = previous_address_in_bursts.eq(sample_address_in_bursts);
                                 : 
                                 :         /* Read or do not read the memory accordingly */
                                 : 
       1       1       0       0 : 		DFEVar burst = io.input("sample_parameter_read_data", dfeRawBits(word_size_in_bits), ~cache_valid);
       1   12241       0       0 : 		DFEVar cached_burst = Reductions.streamHold(burst, ~cache_valid);
                                 : 
                                 : 		/* Read the cache and extract the sample data */
                                 : 
                                 : 		List<DFEVar> samples = new ArrayList<DFEVar>();
                                 : 		for(int i = 0; i < samples_per_word; i++)
                                 : 		{
                                 : 			samples.add(cached_burst.slice(i * bits_per_sample, bits_per_sample));
                                 : 		}
    4105      72       0       0 : 		DFEVar sample_content = control.mux(sample_offset_into_word_in_samples, samples);
                                 : 
                                 : 		/* Output the sample data */
                                 : 
       0       1       0       0 : 		io.output("sampleParameters", RaySampleCommandGeneratorKernel.SampleParameters_t).connect(RaySampleCommandGeneratorKernel.SampleParameters_t.unpack(sample_content));
                                 : 
                                 : 		optimization.popPipeliningFactor();
                                 : 	}
                                 : 
                                 : }
