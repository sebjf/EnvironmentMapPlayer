    LUTs     FFs   BRAMs    DSPs : CustomManager.java
     102     207       0       0 : resources used by this file
   0.03%   0.03%   0.00%   0.00% : % of available
   0.06%   0.09%   0.00%   0.00% : % of total used
   0.09%   0.14%   0.00%   0.00% : % of user resources

                                 : package com.maxeler.maxcompiler.v2.managers.custom;
                                 : 
                                 : import java.io.File;
                                 : import java.util.ArrayList;
                                 : import java.util.Arrays;
                                 : import java.util.Collections;
                                 : import java.util.HashMap;
                                 : import java.util.LinkedHashMap;
                                 : import java.util.LinkedHashSet;
                                 : import java.util.LinkedList;
                                 : import java.util.List;
                                 : import java.util.Map;
                                 : import java.util.Map.Entry;
                                 : import java.util.Set;
                                 : import java.util.Stack;
                                 : 
                                 : import com.maxeler.maxcompiler.v0.kernelcompiler.KernelDesign;
                                 : import com.maxeler.maxcompiler.v2.build.EngineParameters;
                                 : import com.maxeler.maxcompiler.v2.build._EngineParameters;
                                 : import com.maxeler.maxcompiler.v2.errors.MaxCompilerAPIError;
                                 : import com.maxeler.maxcompiler.v2.errors.MaxCompilerInternalError;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler._Kernel;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler._KernelConfiguration;
                                 : import com.maxeler.maxcompiler.v2.managers.DFEManager;
                                 : import com.maxeler.maxcompiler.v2.managers.DFEModel;
                                 : import com.maxeler.maxcompiler.v2.managers.MAXBoardModel;
                                 : import com.maxeler.maxcompiler.v2.managers._Managers;
                                 : import com.maxeler.maxcompiler.v2.managers.custom._ManagerSimulator.ManagerSimType;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.blocks.CustomHDLBlock;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.blocks.CustomHDLNode;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.blocks.Demux;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.blocks.Fanout;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.blocks.Mux;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.blocks.StateMachineBlock;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.blocks._ManagerBlocks;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.stdlib.Max2RingConnection;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.stdlib.Max3RingConnection;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.stdlib.Max4GALAVARingConnection;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.stdlib.Max4MAIARingConnection;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.stdlib.Max4RingConnection;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MaxRingBidirectionalStream;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MaxRingConnection;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup.MemoryAccessPattern;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControllerConfig;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.stdlib.QMem;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.stdlib._BoardIOInterface;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.stdlib._MAX3ComputeIOInterface;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.stdlib._MAX3InterfaceIOInterface;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.stdlib._MAX4BoardIOInterface;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.stdlib._MAX4GALAVABoardIOInterface;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.stdlib._MAX4MAIABoardIOInterface;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.stdlib._MAX4NBoardIOInterface;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.stdlib._ManagerStdlib;
                                 : import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
                                 : import com.maxeler.maxcompiler.v2.managers.engine_interfaces.GeneratedInterface;
                                 : import com.maxeler.maxcompiler.v2.managers.engine_interfaces.GeneratedInterface.Resource;
                                 : import com.maxeler.maxcompiler.v2.statemachine.manager.ManagerStateMachine;
                                 : import com.maxeler.maxcompilersim.AddSimObjectToMaxFilePass;
                                 : import com.maxeler.maxcompilersim.SimCompilePass;
                                 : import com.maxeler.maxcompilersim.SimCompilePass.Mode;
                                 : import com.maxeler.maxdc.BuildFile;
                                 : import com.maxeler.maxdc.BuildManager;
                                 : import com.maxeler.maxdc.Entity;
                                 : import com.maxeler.maxdc.GenerateMaxFileDataFile;
                                 : import com.maxeler.maxdc.MaxFileManager;
                                 : import com.maxeler.maxdc.MaxFileXMacros;
                                 : import com.maxeler.maxdc.Platform;
                                 : import com.maxeler.maxeleros.MappedElementsInfo;
                                 : import com.maxeler.maxeleros.MappedElementsManager;
                                 : import com.maxeler.maxeleros.MaxelerOSPlatform;
                                 : import com.maxeler.maxeleros.ip.PCIe.PCIeStream;
                                 : import com.maxeler.maxeleros.managercompiler.configuration.ManagerNetworkConfiguration.PTPMode;
                                 : import com.maxeler.maxeleros.managercompiler.configuration.ManagerNetworkConfiguration.QSFPMode;
                                 : import com.maxeler.maxeleros.managercompiler.configuration.ManagerPersonaConfiguration;
                                 : import com.maxeler.maxeleros.managercompiler.configuration.ManagerPersonaConfiguration.PersonaMode;
                                 : import com.maxeler.maxeleros.managercompiler.configuration.MaxelerBoardGen;
                                 : import com.maxeler.maxeleros.managercompiler.configuration.MaxelerBoardModel;
                                 : import com.maxeler.maxeleros.managercompiler.core.NodeImplementationManager;
                                 : import com.maxeler.maxeleros.managercompiler.core.UserMaxDCPass;
                                 : import com.maxeler.maxeleros.managercompiler.core.WrapperClock;
                                 : import com.maxeler.maxeleros.managercompiler.core.WrapperCompileManager;
                                 : import com.maxeler.maxeleros.managercompiler.core.WrapperDesignData;
                                 : import com.maxeler.maxeleros.managercompiler.core.WrapperDesignEntity;
                                 : import com.maxeler.maxeleros.managercompiler.core.WrapperNode;
                                 : import com.maxeler.maxeleros.managercompiler.graph_passes.ConnectDebugStreams;
                                 : import com.maxeler.maxeleros.managercompiler.hw.MAX3InterfaceFPGAManager;
                                 : import com.maxeler.maxeleros.managercompiler.libs.AsymmetricInterChipDefinition;
                                 : import com.maxeler.maxeleros.managercompiler.libs.AsymmetricInterChipDefinition.AIStream;
                                 : import com.maxeler.maxeleros.managercompiler.libs.FPGAWrapperEntity;
                                 : import com.maxeler.maxeleros.managercompiler.libs.PCIExpressDefinition;
                                 : import com.maxeler.maxeleros.managercompiler.libs.PhotonFactory;
                                 : import com.maxeler.maxeleros.managercompiler.libs.StreamRoutingFactory;
                                 : import com.maxeler.maxeleros.managercompiler.libs.VideoConfiguration;
                                 : import com.maxeler.maxeleros.managercompiler.libs.WrapperDefinition;
                                 : import com.maxeler.maxeleros.managercompiler.nodes.WrapperNodeFileSink;
                                 : import com.maxeler.maxeleros.managercompiler.nodes.WrapperNodeFileSource;
                                 : import com.maxeler.maxeleros.managercompiler.nodes.WrapperNodeMemoryControllerPro;
                                 : import com.maxeler.maxeleros.managercompiler.nodes.WrapperNodePhoton;
                                 : import com.maxeler.maxeleros.managercompiler.nodes.WrapperNodeStateMachine;
                                 : import com.maxeler.maxeleros.managercompiler.nodes.WrapperNodeV0Photon;
                                 : import com.maxeler.maxeleros.managercompiler.software.codegen.GenerateSlicHostCode;
                                 : import com.maxeler.maxeleros.managercompiler.software.modeinfo.EngineMode;
                                 : import com.maxeler.maxeleros.managercompiler.software.modeinfo.GeneratedMode;
                                 : import com.maxeler.maxeleros.platforms.BoardCapabilities;
                                 : import com.maxeler.maxeleros.platforms.MAX2Board.MAX2BoardCapabilities;
                                 : import com.maxeler.maxeleros.platforms.MAX3Board.MAX3BoardCapabilities;
                                 : import com.maxeler.maxeleros.platforms.MAX4Board.MAX4BoardCapabilities;
                                 : import com.maxeler.maxeleros.platforms.MAX4GALAVABoard.MAX4GALAVABoardCapabilities;
                                 : import com.maxeler.maxeleros.platforms.MAX4MAIABoard.MAX4MAIABoardCapabilities;
                                 : import com.maxeler.maxeleros.platforms.MAX4NBoard.MAX4NBoardCapabilities;
                                 : import com.maxeler.networking.statemachines.Flushing;
                                 : import com.maxeler.networking.statemachines.TinyFIFO;
                                 : import com.maxeler.networking.v1.managers.netlib.Max4NetworkConnection;
                                 : import com.maxeler.networking.v1.managers.netlib.NetworkConnection;
                                 : import com.maxeler.photon.core.PhotonIOInformation;
                                 : import com.maxeler.photon.input_arbitration.ArbitratedInput;
                                 : import com.maxeler.photon.input_arbitration.InputArbitrator;
                                 : import com.maxeler.statemachine.ast.InvalidStateMachineException;
                                 : import com.maxeler.statemachine.ast.StateMachineInstance;
                                 : import com.maxeler.utils.MaxCompilerHide;
                                 : 
                                 : public class CustomManager extends DFEManager {
                                 : 	public enum Target {
                                 : 		HDL_SIM,
                                 : 		DFE_SIM,
                                 : 		DFE;
                                 : 	}
                                 : 
                                 : 	public enum LMemFrequency {
                                 : 		MAX2_200(200.0, DFEModel.MAX2C),
                                 : 		MAX2_250(250.0, DFEModel.MAX2C),
                                 : 		MAX2_300(300.0, DFEModel.MAX2C),
                                 : 		MAX3_333(333.333333, DFEModel.VECTIS),
                                 : 		MAX3_350(350.0, DFEModel.VECTIS),
                                 : 		MAX3_300(300.0, DFEModel.VECTIS),
                                 : 		MAX3_400(400.0, DFEModel.VECTIS),
                                 : 		MAX4_333(333.333, DFEModel.CORIA),
                                 : 		MAX4_400(400.0, DFEModel.CORIA),
                                 : 		MAX4_533(533.333, DFEModel.CORIA),
                                 : 		MAX4MAIA_400(400.0, DFEModel.MAIA),
                                 : 		MAX4MAIA_533(533.333, DFEModel.MAIA),
                                 : 		MAX4MAIA_666(666.666, DFEModel.MAIA),
                                 : 		MAX4MAIA_733(733.333, DFEModel.MAIA),
                                 : 		MAX4MAIA_800(800.0, DFEModel.MAIA),
                                 : 		MAX4GALAVA_400(400.0, DFEModel.GALAVA),
                                 : 		MAX4GALAVA_666(666.666, DFEModel.GALAVA),
                                 : 		MAX4ISCA_400(400.0, DFEModel.ISCA),
                                 : 		MAX4ISCA_533(533.333, DFEModel.ISCA),
                                 : 		MAX4ISCA_666(666.666, DFEModel.ISCA),
                                 : 		MAX4ISCA_733(733.333, DFEModel.ISCA),
                                 : 		MAX4ISCA_800(800.0, DFEModel.ISCA);
                                 : 
                                 : 		private final double frequency;
                                 : 		private final MAXBoardModel board_model;
                                 : 		LMemFrequency(double frequency, MAXBoardModel board_type) {
                                 : 			this.frequency = frequency;
                                 : 			this.board_model = board_type;
                                 : 		}
                                 : 
                                 : 		public double frequency() {
                                 : 			return frequency;
                                 : 		}
                                 : 
                                 : 		BoardCapabilities board_type() {
                                 : 			return board_model.getBoardCapabilities();
                                 : 		}
                                 : 
                                 : 		/** Get LMemFrequency from integer frequency and board type */
                                 : 		public static LMemFrequency fromInt(int freq_mhz, MAXBoardModel board_type) {
                                 : 			for (LMemFrequency lmf : LMemFrequency.values()) {
                                 : 				if ((board_type == lmf.board_model) && (freq_mhz == (int)Math.floor(lmf.frequency))) {
                                 : 					return lmf;
                                 : 				}
                                 : 			}
                                 : 			throw new MaxCompilerAPIError("LMem frequency " + freq_mhz + " MHz is not valid for " + board_type);
                                 : 		}
                                 : 	}
                                 : 
                                 : 	private static final int m_default_app_id = 0;
                                 : 	private static final int m_default_rev_id = 0;
                                 : 	private static final int m_maximum_memory_streams = 15;
                                 : 
                                 : 	private final WrapperDesignData m_data;
                                 : 	private final StreamRoutingFactory m_routing;
                                 : 	private final _BoardIOInterface m_board_io;
                                 : 	private final PhotonFactory m_photon_factory;
                                 : 	private final Stack<ManagerClock> m_default_clock_stack = new Stack<ManagerClock>();
                                 : 	private final WrapperClock m_streamclk;
                                 : 	private final Set<MaxRingConnection> m_used_maxring_connections = new LinkedHashSet<MaxRingConnection>();
                                 : 	protected final Set<NetworkConnection> m_used_network_connections = new LinkedHashSet<NetworkConnection>();
                                 : 
                                 : 	private final List<String> m_slic_blocks_to_ignore = new ArrayList<String>();
                                 : 	private final List<String> m_slic_streams_to_ignore = new ArrayList<String>();
                                 : 	private final List<String> m_slic_routing_to_ignore = new ArrayList<String>();
                                 : 
                                 : 	private final Set<BuildFile> m_externFiles = new LinkedHashSet<BuildFile>();
                                 : 	private final List<String> m_externFlags = new ArrayList<String>();
                                 : 
                                 : 	private final BoardCapabilities m_board_capabilties;
                                 : 
                                 : 	private FPGAWrapperEntity m_wrapper;
                                 : 
                                 : 	private boolean m_enable_stream_status = false;
                                 : 
                                 : 	private int m_num_memory_streams = 0;
                                 : 
                                 : 	private enum MemoryDirection {
                                 : 		READ_FROM_MEMORY,
                                 : 		WRITE_TO_MEMORY
                                 : 	};
                                 : 
                                 : 	private final LinkedList<MemoryControlGroup> m_memory_control_groups =
                                 : 		new LinkedList<MemoryControlGroup>();
                                 : 	private final Map<String, MemoryDirection> m_memory_stream_direction =
                                 : 		new LinkedHashMap<String, MemoryDirection>();
                                 : 	private final Map<MemoryControlGroup, DFELink> m_memory_command_completion_streams =
                                 : 		new LinkedHashMap<MemoryControlGroup, DFELink>();
                                 : 
                                 : 	public class Debug {
                                 : 		private DebugLevel m_debug_level = null;
                                 : 		private Debug() {
                                 : 		}
                                 : 
                                 : 		public void setDebugLevel(DebugLevel debug_level) {
                                 : 			if (debug_level == null)
                                 : 				throw new MaxCompilerAPIError(m_data.getBuildManager(),"Argument debug_level must not be null.");
                                 : 			if (m_debug_level != null)
                                 : 				throw new MaxCompilerAPIError(m_data.getBuildManager(),"Debug level can only be set once.");
                                 : 			m_debug_level = debug_level;
                                 : 			m_enable_stream_status = debug_level.hasStreamStatus();
                                 : 			debug_level.updateConfig(m_data.getManagerConfiguration().debug);
                                 : 		}
                                 : 
                                 : 		public DFELink streamStatus(DFELink to_probe, boolean checksum) {
                                 : 			_CustomManagers.streamToImp(to_probe).enableStreamStatus(checksum);
                                 : 			return to_probe;
                                 : 		}
                                 : 
                                 : 		@MaxCompilerHide
                                 : 		public DFELink chipscope(DFELink to_chipscope) {
                                 : 			return chipscope(to_chipscope, true);
                                 : 		}
                                 : 
                                 : 		@MaxCompilerHide
                                 : 		public DFELink chipscope(DFELink to_chipscope, boolean captureData) {
                                 : 			if (to_chipscope == null)
                                 : 				throw MaxCompilerAPIError.nullParam("to_chipscope");
                                 : 
                                 : 			_CustomManagers.chipscopeStream(to_chipscope, captureData);
                                 : 			return to_chipscope;
                                 : 		}
                                 : 	}
                                 : 
                                 : 	public class Config {
                                 : 		private MemoryControllerConfig m_memConfig = null;
                                 : 
                                 : 		private Config() {
                                 : 		}
                                 : 
                                 : 		public void setDefaultStreamClockFrequency(int freq_mhz) {
                                 : 			m_streamclk.setRate(freq_mhz);
                                 : 			m_data.getManagerConfiguration().setStreamClockFrequencyMHz(freq_mhz);
                                 : 		}
                                 : 
                                 : 		public void setForwardResetsOverIDFELink(boolean should_forward) {
                                 : 			m_data.getManagerConfiguration().setForwardResetsOverIFPGALink(
                                 : 				m_data.getBuildManager(), should_forward);
                                 : 		}
                                 : 
                                 : 		public void setApplicationRevisionIds(int app_id, int rev_id) {
                                 : 			m_data.setApplicationRevisionIds(app_id, rev_id);
                                 : 		}
                                 : 
                                 : 		public void setNumberOfPCIExpressLanes(int num_lanes) {
                                 : 			m_board_io.setNumberOfPCIExpressLanes(num_lanes);
                                 : 			m_data.getManagerConfiguration().pcie.setNumberOfPCIExpressLanes(num_lanes);
                                 : 		}
                                 : 
                                 : 		public void setEnablePCIExpressFastClock(boolean fast_clock) {
                                 : 			m_board_io.setEnablePCIExpressFastClock(fast_clock);
                                 : 			m_data.getManagerConfiguration().pcie.setEnablePCIExpressFastClock(fast_clock);
                                 : 		}
                                 : 
                                 : 		public void setMaxRingNumLanes(Max2RingConnection connection, int num_lanes) {
                                 : 			m_board_io.setMaxRingNumLanes(connection, num_lanes);
                                 : 			m_data.getManagerConfiguration().maxring.setMaxRingNumLanes(connection, num_lanes);
                                 : 		}
                                 : 
                                 : 		public void setMaxRingNumLanes(Max3RingConnection connection, int num_lanes) {
                                 : 			m_board_io.setMaxRingNumLanes(connection, num_lanes);
                                 : 			m_data.getManagerConfiguration().maxring.setMaxRingNumLanes(connection, num_lanes);
                                 : 		}
                                 : 
                                 : 		public void setMaxRingNumLanes(Max4RingConnection connection, int num_lanes) {
                                 : 			m_board_io.setMaxRingNumLanes(connection, num_lanes);
                                 : 			m_data.getManagerConfiguration().maxring.setMaxRingNumLanes(connection, num_lanes);
                                 : 		}
                                 : 
                                 : 		public void setMaxRingNumLanes(MaxRingConnection connection, int num_lanes) {
                                 : 			m_board_io.setMaxRingNumLanes(connection, num_lanes);
                                 : 			m_data.getManagerConfiguration().maxring.setMaxRingNumLanes(connection, num_lanes);
                                 : 		}
                                 : 
                                 : 		public void setMemoryControllerConfig(MemoryControllerConfig config) {
                                 : 			if (config == null)
                                 : 				throw new MaxCompilerAPIError(m_data.getBuildManager(),"Memory configuration must not be null.");
                                 : 			if (m_memConfig != null)
                                 : 				throw new MaxCompilerAPIError(m_data.getBuildManager(),"Memory configuration can only be set once.");
                                 : 			m_memConfig = config;
                                 : 			m_memConfig.saveToManagerConfig(m_data.getManagerConfiguration().dram);
                                 : 			m_board_io.setMemoryControllerConfig(m_memConfig);
                                 : 		}
                                 : 
                                 : 		public void setEnableAddressGeneratorsInSlowClock(boolean enable) {
                                 : 			m_data.getManagerConfiguration().dram.setEnableAddressGeneratorsInSlowClock(enable);
                                 : 		}
                                 : 
                                 : 		public void setAllowNonMultipleTransitions(boolean enable) {
                                 : 			m_data.getManagerConfiguration().setAllowNonMultipleTransitions(enable);
                                 : 		}
                                 : 
                                 : 		public void setOnCardMemoryFrequency(double freq_mhz) {
                                 : 			m_board_io.setOnCardMemoryFrequency(freq_mhz);
                                 : 			m_data.getManagerConfiguration().dram.setOnCardMemoryFrequency(freq_mhz);
                                 : 		}
                                 : 
                                 : 		public void setOnCardMemoryFrequency(LMemFrequency clock) {
                                 : 			if ((m_board_capabilties instanceof MAX2BoardCapabilities && clock.board_type() instanceof MAX2BoardCapabilities) ||
                                 : 				(m_board_capabilties instanceof MAX3BoardCapabilities && clock.board_type() instanceof MAX3BoardCapabilities) ||
                                 : 				(m_board_capabilties instanceof MAX4BoardCapabilities && clock.board_type() instanceof MAX4BoardCapabilities) ||
                                 : 				(m_board_capabilties instanceof MAX4MAIABoardCapabilities && clock.board_type() instanceof MAX4MAIABoardCapabilities) ||
                                 : 				(m_board_capabilties instanceof MAX4GALAVABoardCapabilities && clock.board_type() instanceof MAX4GALAVABoardCapabilities) ||
                                 : 				(m_board_capabilties instanceof MAX4NBoardCapabilities && clock.board_type() instanceof MAX4NBoardCapabilities))
                                 : 			{
                                 : 					m_board_io.setOnCardMemoryFrequency(clock.frequency());
                                 : 					m_data.getManagerConfiguration().dram.setOnCardMemoryFrequency(clock.frequency());
                                 : 			} else {
                                 : 				throw new MaxCompilerAPIError("LMemFrequency " + clock.toString() +
                                 : 					" is not supported for this board type");
                                 : 			}
                                 : 
                                 : 		}
                                 : 
                                 : 		public void setStreamToCPUMaxNumber(int num) {
                                 : 			if(!(m_board_io instanceof _MAX3ComputeIOInterface)) {
                                 : 				throw new MaxCompilerAPIError("Custom maximum number of streams to host is not supported for this board type");
                                 : 			}
                                 : 			_MAX3ComputeIOInterface board_io = (_MAX3ComputeIOInterface)m_board_io;
                                 : 			board_io.setStreamToCPUMaxNum(num);
                                 : 			m_data.getManagerConfiguration().pcie.setStreamToHostMaxNum(num);
                                 : 		}
                                 : 
                                 : 		public void setStreamFromCPUMaxNumber(int num) {
                                 : 			if(!(m_board_io instanceof _MAX3ComputeIOInterface)) {
                                 : 				throw new MaxCompilerAPIError("Custom maximum number of streams from host is not supported for this board type");
                                 : 			}
                                 : 			_MAX3ComputeIOInterface board_io = (_MAX3ComputeIOInterface)m_board_io;
                                 : 			board_io.setStreamFromCPUMaxNum(num);
                                 : 			m_data.getManagerConfiguration().pcie.setStreamFromHostMaxNum(num);
                                 : 		}
                                 : 
                                 : 		public void setPipelinedComputeController(boolean enable) {
                                 : 			m_data.setPipelinedComputeControllerEnabled(enable);
                                 : 		}
                                 : 	}
                                 : 
                                 : 	public class _SimulationOptions {
                                 : 		private _SimulationOptions() {}
                                 : 
                                 : 		public void setUseNativeFloatTypes (boolean on) {
                                 : 			m_data.getManagerConfiguration().simulation.setUseNativeFloatingPointTypes(on);
                                 : 		}
                                 : 
                                 : 		public boolean getUseNativeFloatTypes() {
                                 : 			return m_data.getManagerConfiguration().simulation.getUseNativeFloatingPointTypes();
                                 : 		}
                                 : 	}
                                 : 
                                 : 	public class _Config extends Config {
                                 : 
                                 : 		public _SimulationOptions simulation = new _SimulationOptions();
                                 : 
                                 : 		public void setImplementationManager(NodeImplementationManager mgr) {
                                 : 			m_data.setImplementationManager(mgr);
                                 : 		}
                                 : 
                                 : 		public void setEnablePCIExpressSlaveStreaming(boolean slave_streaming) {
                                 : 			if (m_board_io instanceof _MAX3InterfaceIOInterface)
                                 : 				((_MAX3InterfaceIOInterface)m_board_io).setEnablePCIExpressSlaveStreaming(slave_streaming);
                                 : 			else if (m_board_io instanceof _MAX4BoardIOInterface)
                                 : 				((_MAX4BoardIOInterface)m_board_io).setEnablePCIExpressSlaveStreaming(slave_streaming);
                                 : 			else if (m_board_io instanceof _MAX4MAIABoardIOInterface)
                                 : 				((_MAX4MAIABoardIOInterface)m_board_io).setEnablePCIExpressSlaveStreaming(slave_streaming);
                                 : 			else if (m_board_io instanceof _MAX4NBoardIOInterface)
                                 : 				((_MAX4NBoardIOInterface)m_board_io).setEnablePCIExpressSlaveStreaming(slave_streaming);
                                 : 			else if (m_board_io instanceof _MAX4GALAVABoardIOInterface)
                                 : 				((_MAX4GALAVABoardIOInterface)m_board_io).setEnablePCIExpressSlaveStreaming(slave_streaming);
                                 : 			else if(slave_streaming)
                                 : 				throw new MaxCompilerAPIError("PCIe Slave Interface cannot be enabled on this type of board");
                                 : 		}
                                 : 
                                 : 		public void setSystemJitter(int picoseconds) {
                                 : 			if(!(m_board_io instanceof _MAX3ComputeIOInterface)) {
                                 : 				throw new MaxCompilerAPIError("Custom system jitter is not supported for this board type");
                                 : 			}
                                 : 			_MAX3ComputeIOInterface board_io = (_MAX3ComputeIOInterface)m_board_io;
                                 : 			board_io.setSystemJitter(picoseconds);
                                 : 		}
                                 : 
                                 : 		public void setMultiCycleMappedMemories(boolean enableMultiCycle) {
                                 : 			m_data.getManagerConfiguration().setMultiCycleMappedMemBusEnabled(enableMultiCycle);
                                 : 		}
                                 : 
                                 : 		public void forcePCIeGen1Capability(boolean force_gen1) {
                                 : 			if(!(m_board_io instanceof _MAX3InterfaceIOInterface)) {
                                 : 				throw new MaxCompilerAPIError("Forcing PCIe capability to Gen1 is not supported for this board type");
                                 : 			}
                                 : 			_MAX3InterfaceIOInterface board_io = (_MAX3InterfaceIOInterface)m_board_io;
                                 : 			board_io.forcePCIeGen1Capability(force_gen1);
                                 : 		}
                                 : 	}
                                 : 
                                 : 	// work around the limited power of Java constructors...
                                 : 	private static final class _CustomManagerParams extends DFEManager._CustomParameters{
                                 : 		final _ManagerSimulator managerSimulator;
                                 : 		final _HDLTestBench hdlTestBenchNonForwarding;
                                 : 		final _HDLTestBench hdlTestBenchForwarding;
                                 : 		private _CustomManagerParams(BuildManager b) {
                                 : 			this(b,null,null,null);
                                 : 		}
                                 : 		private _CustomManagerParams(BuildManager b, _ManagerSimulator s, _HDLTestBench h, _HDLTestBench i) {
                                 : 			super(b);
                                 : 			managerSimulator = s;
                                 : 			hdlTestBenchNonForwarding = h;
                                 : 			hdlTestBenchForwarding = i;
                                 : 		}
                                 : 		private _CustomManagerParams finalize(CustomManager self) {
                                 : 			if (hdlTestBenchNonForwarding != null)
                                 : 				hdlTestBenchNonForwarding.setManager(self);
                                 : 			if (hdlTestBenchForwarding != null)
                                 : 				hdlTestBenchForwarding.setForwardedManager(self);
                                 : 			return this;
                                 : 		}
                                 : 		private HDLTestBench getSimTransactor() {
                                 : 			if (hdlTestBenchForwarding != null)
                                 : 				return hdlTestBenchForwarding;
                                 : 			return hdlTestBenchNonForwarding;
                                 : 		}
                                 : 		private _ManagerSimulator getManagerSimulator() {
                                 : 			return managerSimulator;
                                 : 		}
                                 : 	}
                                 : 
                                 : 	public final Config config;
                                 : 	public final Debug debug;
                                 : 
                                 : 	private String m_name;
                                 : 	private final boolean m_simulate_in_modelsim;
                                 : 	private final _ManagerSimulator m_manager_sim;
                                 : 	private final HDLTestBench m_sim_transactor;
                                 : 
                                 : 	/**
                                 : 	 * See {@link #CustomManager(EngineParameters)}.
                                 : 	 *
                                 : 	 * @param board_model
                                 : 	 * @param name
                                 : 	 * @deprecated
                                 : 	 */
                                 : 	@Deprecated
                                 : 	public CustomManager(
                                 : 		MAXBoardModel board_model,
                                 : 		String name)
                                 : 	{
                                 : 		this(board_model, name, Target.DFE);
                                 : 	}
                                 : 
                                 : 	/**
                                 : 	 * The use of this constructor is discouraged. See {@link #CustomManager(EngineParameters)}.
                                 : 	 *
                                 : 	 * @param board_model
                                 : 	 * @param name
                                 : 	 * @param target
                                 : 	 */
                                 : 	@Deprecated
                                 : 	public CustomManager(
                                 : 		MAXBoardModel board_model,
                                 : 		String buildName,
                                 : 		Target target)
                                 : 	{
                                 : 		this(new _EngineParameters(
                                 : 			// make the manager configuration mutable again.
                                 : 			// this is necessary as we use the configuration when creating the
                                 : 			// full manager (we will call the CustomManager constructor and pass in
                                 : 			// the engine params object which holds a ref to our manager config). Also set
                                 : 			// the pretty print value back to the original value.
                                 : 				new File(buildName).getName(),
                                 : 				buildName,
                                 : 				board_model,
                                 : 				EngineParameters.Target.get(target)));
                                 : 	}
                                 : 
                                 : 	/**
                                 : 	 * Creates a new CustomManager with a given configuration.
                                 : 	 * The constructor will call {@code logParameters} and
                                 : 	 * {@code writeParametersToMaxFile} on the configuration object.
                                 : 	 *
                                 : 	 * @param configuration configuration for this manager.
                                 : 	 */
                                 : 	public CustomManager(EngineParameters engineParams) {
                                 : 		this(engineParams, null);
                                 : 		engineParams.logParameters(this);
                                 : 		engineParams.writeParametersToMaxFile(this);
                                 : 	}
                                 : 
                                 : 	/**
                                 : 	 * CustomManager constructor.
                                 : 	 * The use of this constructor is discouraged. See {@link #CustomManager(EngineParameters)}.
                                 : 	 * @param board_model board targeted by the build
                                 : 	 * @param name name of the build, used in naming the maxfile and the generated
                                 : 	 *        function of the SLiC interface
                                 : 	 * @param build_directory directory in which the build happens (see {@link BuildManager#BuildManager(String,String,boolean)}
                                 : 	 * @param target target if the build (see {@link Target}
                                 : 	 */
                                 : 	@Deprecated
                                 : 	public CustomManager(
                                 : 		MAXBoardModel board_model,
                                 : 		String name,
                                 : 		String build_directory,
                                 : 		Target target)
                                 : 	{
                                 : 		this(new _EngineParameters(
                                 : 				name,
                                 : 				build_directory,
                                 : 				board_model,
                                 : 				EngineParameters.Target.get(target))
                                 : 			);
                                 : 	}
                                 : 
                                 : 	/**
                                 : 	 * The use of this constructor is discouraged. See {@link #CustomManager(EngineParameters)}.
                                 : 	 *
                                 : 	 * @param board_model
                                 : 	 * @param name
                                 : 	 * @deprecated
                                 : 	 */
                                 : 	@Deprecated
                                 : 	public CustomManager(
                                 : 		boolean generate_max_file_for_simulation,
                                 : 		MAXBoardModel board_model,
                                 : 		String name)
                                 : 	{
                                 : 		this(board_model,
                                 : 			name,
                                 : 			generate_max_file_for_simulation ? Target.DFE_SIM : Target.DFE);
                                 : 	}
                                 : 
                                 : 	@MaxCompilerHide
                                 :     @Deprecated
                                 : 	protected CustomManager(
                                 :         boolean generate_max_file_for_simulation,
                                 :         MAXBoardModel board_model,
                                 :         String name,
                                 :         String build_directory,
                                 :         boolean use_mapped_elements_controller,
                                 :         boolean simulate_in_modelsim)
                                 : 	{
                                 :         this(
                                 :                 _EngineParameters.create(
                                 :                         name,
                                 :                         build_directory,
                                 :                         board_model,
                                 :                         generate_max_file_for_simulation,
                                 :                         simulate_in_modelsim));
                                 :         if (!use_mapped_elements_controller)
                                 :                 throw new MaxCompilerAPIError("Building without the Mapped Elements Controller is deprecated in MaxCompiler 2011.3 and later.");
                                 : 	}
                                 : 
                                 : 	@MaxCompilerHide
                                 :     public CustomManager(
                                 :         boolean generate_max_file_for_simulation,
                                 :         MAXBoardModel board_model,
                                 :         String name,
                                 :         boolean use_mapped_elements_controller,
                                 :         boolean simulate_in_modelsim)
                                 :     {
                                 :         this(
                                 :                 _EngineParameters.create(
                                 :                         name,
                                 :                         board_model,
                                 :                         generate_max_file_for_simulation,
                                 :                         simulate_in_modelsim));
                                 :         if (!use_mapped_elements_controller)
                                 :                 throw new MaxCompilerAPIError("Building without the Mapped Elements Controller is deprecated in MaxCompiler 2011.3 and later.");
                                 : 	}
                                 : 
                                 :     // constructor previously used for modelsim simulation
                                 : 	@MaxCompilerHide
                                 :     public CustomManager(
                                 :             BuildManager build_manager,
                                 :             DFEModel model,
                                 :             boolean use_mapped_elements_controller,
                                 :             boolean simulate_in_modelsim)
                                 :     {
                                 :             this(
                                 :                     _EngineParameters.create(
                                 :                             build_manager.getSlicStemName(),
                                 :                             build_manager.getBuildName(),
                                 :                             model,
                                 :                             false,
                                 :                             simulate_in_modelsim),
                                 :                     build_manager);
                                 :     }
                                 : 
                                 : 	// main constructor
                                 : 	@MaxCompilerHide
                                 : 	public CustomManager(
                                 : 		final EngineParameters engineParameters,
                                 : 		final BuildManager customBuildManager)
                                 : 	{
                                 : 		super(
                                 : 			engineParameters,
                                 : 			createInitParams(engineParameters, customBuildManager)
                                 : 		);
                                 : 
                                 : 		m_simulate_in_modelsim =
                                 : 			engineParameters.getTarget() == EngineParameters.Target.HDL_SIM;
                                 : 
                                 : 		_CustomManagerParams params = super.<_CustomManagerParams>getCustomParameters().finalize(this);
                                 : 		m_manager_sim = params.getManagerSimulator();
                                 : 		m_sim_transactor = params.getSimTransactor();
                                 : 		m_board_capabilties = engineParameters.getDFEModel().getBoardCapabilities();
                                 : 
                                 : 		m_name = params.getBuildManager().getBuildName();
                                 : 		m_data = new WrapperDesignData(
                                 : 			params.getBuildManager(),
                                 : 			"Manager_" + m_name,
                                 : 			m_default_app_id,
                                 : 			m_default_rev_id,
                                 : 			m_simulate_in_modelsim);
                                 : 
                                 : 		Platform<?, ?> platform;
                                 : 		if(!params.getBuildManager().hasPlatformSet()) {
                                 : 			platform = m_board_capabilties.getPlatform();
                                 : 			params.getBuildManager().setPlatform(platform);
                                 : 		} else
                                 : 			platform = params.getBuildManager().getPlatform();
                                 : 
                                 : 		if(this instanceof UserMaxDCPass)
                                 : 			m_data.addUserMaxDCPass((UserMaxDCPass)this);
                                 : 
                                 : 		m_routing = new StreamRoutingFactory(m_data);
                                 : 		m_photon_factory = new PhotonFactory(m_data);
                                 : 
                                 : 		m_streamclk =
                                 : 			m_data.generateStreamClock("STREAM", m_data.getManagerConfiguration().getStreamClockFrequencyMHz(), false);	/* Stream clock can be optimised away if the design doesn't use it at all */
                                 : 		m_data.getManagerConfiguration().setStreamClockFrequencyMHz(m_streamclk.getRate());
                                 : 		m_data.pushNodeGroup(null);
                                 : 		m_default_clock_stack.push(new ManagerClock(m_streamclk));
                                 : 		m_board_io = _BoardIOInterface.newInstance(
                                 : 			params.getBuildManager(), m_data, m_streamclk);
                                 : 		m_board_io.initialiseManagerConfiguration(m_data.getManagerConfiguration());
                                 : 
                                 : 		// initialise the configuration at the end..
                                 : 		config = new _Config();
                                 : 		debug = new Debug();
                                 : 
                                 : 		if(getManagerConfiguration().getEnableMPCX()) {
                                 : 			if(m_board_io instanceof _MAX4BoardIOInterface ||
                                 : 			   m_board_io instanceof _MAX4MAIABoardIOInterface ||
                                 : 			   m_board_io instanceof _MAX4NBoardIOInterface ||
                                 : 			   m_board_io instanceof _MAX4GALAVABoardIOInterface)
                                 : 			{
                                 : 				((_Config)config).setEnablePCIExpressSlaveStreaming(true);
                                 : 			}
                                 : 		}
                                 : 
                                 : 		_KernelConfiguration.setBuildTarget(m_kernel_configuration, m_data.getManagerConfiguration());
                                 : 	}
                                 : 
                                 : 	/**
                                 : 	 * Creates a correctly initialised _CustomManagerParams object.
                                 : 	 * @param configuration The manager configuration for this build manager
                                 : 	 * @param buildName The name of the design (aka maxfilename in MaxIDE)
                                 : 	 * @param buildDirectory
                                 : 	 * @param customManager If null, createInitParams will create the correct default build manager.
                                 : 	 * If set then the passed-in build manager will be used.
                                 : 	 * @return an initialised _CustomManagerParams object.
                                 : 	 */
                                 : 	private static _CustomManagerParams createInitParams(
                                 : 		EngineParameters configuration,
                                 : 		BuildManager customManager)
                                 : 	{
                                 : 		// do we need to build with a special build manager?
                                 : 		if (customManager != null)
                                 : 			return new _CustomManagerParams(customManager);
                                 : 
                                 : 		final String name = configuration.getMaxFileName();
                                 : 		final String buildDirectory = configuration.getBuildName();
                                 : 
                                 : 		// no, create the default build manager - depending on the build target.
                                 : 		_ManagerSimulator m_manager_sim;
                                 : 		_HDLTestBench m_sim_transactor;
                                 : 		switch (configuration.getTarget()) {
                                 : 			case HDL_SIM:
                                 : 				switch(configuration.getDFEModel().getDFEArchitecture()) {
                                 : 					case MAX2:
                                 : 						m_manager_sim = new _ManagerSimulator(name, buildDirectory, ManagerSimType.MAX2_SINGLEFPGA);
                                 : 						_HDLTestBench max2sim = new _HDLTestBench("max2fpga", m_manager_sim);
                                 : 						m_sim_transactor = max2sim;
                                 : 						return new _CustomManagerParams(max2sim.getBuildManager(), m_manager_sim, m_sim_transactor, null);
                                 : 					case MAX3:
                                 : 						m_manager_sim = new _ManagerSimulator(name, buildDirectory, ManagerSimType.MAX3);
                                 : 						_HDLTestBench compute = new _HDLTestBench("compute", m_manager_sim);
                                 : 						_HDLTestBench iface = new _HDLTestBench("interface", m_manager_sim);
                                 : 						iface.setManager(new MAX3InterfaceFPGAManager(iface.getBuildManager(), true, true));
                                 : 						m_sim_transactor = iface;
                                 : 						return new _CustomManagerParams(compute.getBuildManager(), m_manager_sim, compute, m_sim_transactor);
                                 : 					case MAX4:
                                 : 						m_manager_sim = new _ManagerSimulator(name, buildDirectory, ManagerSimType.MAX4);
                                 : 						_HDLTestBench max4sim = new _HDLTestBench("max4fpga", m_manager_sim);
                                 : 						m_sim_transactor = max4sim;
                                 : 						return new _CustomManagerParams(max4sim.getBuildManager(),  m_manager_sim, m_sim_transactor, null);
                                 : 					case MAX4_Maia:
                                 : 						m_manager_sim = new _ManagerSimulator(name, buildDirectory, ManagerSimType.MAX4MAIA);
                                 : 						_HDLTestBench max4maiasim = new _HDLTestBench("max4maiafpga", m_manager_sim);
                                 : 						m_sim_transactor = max4maiasim;
                                 : 						return new _CustomManagerParams(max4maiasim.getBuildManager(),  m_manager_sim, m_sim_transactor, null);
                                 : 					case MAX4_Isca:
                                 : 						m_manager_sim = new _ManagerSimulator(name, buildDirectory, ManagerSimType.MAX4N);
                                 : 						_HDLTestBench max4nsim = new _HDLTestBench("max4nfpga", m_manager_sim);
                                 : 						m_sim_transactor = max4nsim;
                                 : 						return new _CustomManagerParams(max4nsim.getBuildManager(),  m_manager_sim, m_sim_transactor, null);
                                 : 					case MAX4_Galava:
                                 : 						m_manager_sim = new _ManagerSimulator(name, buildDirectory, ManagerSimType.MAX4GALAVA);
                                 : 						_HDLTestBench max4galavasim = new _HDLTestBench("max4galavafpga", m_manager_sim);
                                 : 						m_sim_transactor = max4galavasim;
                                 : 						return new _CustomManagerParams(max4galavasim.getBuildManager(),  m_manager_sim, m_sim_transactor, null);
                                 : 					default:
                                 : 						throw new MaxCompilerInternalError("Unknown board architecture "
                                 : 							+ configuration.getDFEModel().getDFEArchitecture());
                                 : 				}
                                 : 			case DFE:
                                 : 				return new _CustomManagerParams(new BuildManager(name, buildDirectory, false));
                                 : 			case DFE_SIM:
                                 : 				return new _CustomManagerParams(new BuildManager(name, buildDirectory, true));
                                 : 			default:
                                 : 				throw new MaxCompilerInternalError("Unknown build target "
                                 : 					+ configuration.getTarget().toString());
                                 : 		}
                                 : 	}
                                 : 
                                 : 
                                 : 	@MaxCompilerHide
                                 : 	public void forceBuildName_hackForMAX3InterfaceFPGA(String name) {
                                 : 		m_name = name;
                                 : 	}
                                 : 
                                 : 	@MaxCompilerHide
                                 : 	public void setDisableModelsimLogEverything(boolean disabled) {
                                 : 		getManagerSimulator().setDisableLogEverything(disabled);
                                 : 	}
                                 : 
                                 : 	@MaxCompilerHide
                                 : 	public void setEnableUseGlbl(boolean enabled) {
                                 : 		getManagerSimulator().setEnableUseGlbl(enabled);
                                 : 	}
                                 : 
                                 : 	private BuildManager _getBuildManager() {
                                 : 		return _Managers.getBuildManager(this);
                                 : 	}
                                 : 
                                 : 	public ManagerClock generateStreamClock(String name, float freq_mhz) {
                                 : 		return new ManagerClock(m_data.generateStreamClock(name, freq_mhz, true));
                                 : 	}
                                 : 
                                 : 	Entity buildSim(String fpga_name) {
                                 : 		FPGAWrapperEntity wrapper = buildInternal();
                                 : 
                                 : 		Entity top = m_board_capabilties.createSimTop(
                                 : 			fpga_name,
                                 : 			_getBuildManager(),
                                 : 			wrapper,
                                 : 			m_data.getTopLevelParameterisation());
                                 : 
                                 : 		return top;
                                 : 	}
                                 : 
                                 : 	@MaxCompilerHide
                                 : 	public _BoardIOInterface getBoardIOInterface() {
                                 : 		return m_board_io;
                                 : 	}
                                 : 
                                 : 	private void buildCPUCodeSim() {
                                 : 		preBuildOperations();
                                 : 
                                 : 		WrapperCompileManager manager = new WrapperCompileManager(m_data);
                                 : 		manager.setEnableStreamStatus(m_enable_stream_status);
                                 : 		manager.setEnableStreamStatusChecksums(m_data.getManagerConfiguration().debug.hasStreamStatusChecksums());
                                 : 
                                 : 		manager.buildHostCodeSim();
                                 : 
                                 : 		// keep the code below in sync with code found in buildInternal()!
                                 : 		// FIXME: refactor to share code with buildInternal
                                 : 		if (m_memory_control_groups.size() != 0)//  m_data.m_simulated_memory_controller != null)
                                 : 		{
                                 : 			// make X macros -- keep the code below IN SYNC with code found in buildInternal()!
                                 : 
                                 : 			// ... for memory controller as a whole
                                 : 			// FIXME! multiple memory controllers...
                                 : 			int blength = getMemoryWordSize(m_data.getBuildManager().getPlatform()) * m_data.getManagerConfiguration().dram.getBurstSize();
                                 : 			if(m_data.getManagerConfiguration().dram.getMAX2CompatibilityMode())
                                 : 				blength = blength/4;
                                 : 
                                 : 			if (!m_memory_control_groups.isEmpty()) {
                                 : 				MaxFileXMacros mem_macro = new MaxFileXMacros("MANAGER_MEMCTL");
                                 : 				MaxFileManager.getMaxFileManager(_getBuildManager()).addMaxFileDataSegment(mem_macro);
                                 : 				mem_macro.addMacro(
                                 : 					_ManagerStdlib.getMemoryControlGroupControllerName(m_memory_control_groups.get(0)),
                                 : 					WrapperNodeMemoryControllerPro.defaultName + ".MemoryControllerPro",
                                 : 					blength);
                                 : 			}
                                 : 
                                 : 			// ... for control groups
                                 : 			MaxFileXMacros memctrl_macros = new MaxFileXMacros("MANAGER_MEMCTL_CONTROL_GROUP");
                                 : 			MaxFileManager.getMaxFileManager(_getBuildManager()).addMaxFileDataSegment(memctrl_macros);
                                 : 
                                 : 			for (MemoryControlGroup grp : m_memory_control_groups) {
                                 : 				memctrl_macros.addMacro(
                                 : 					_ManagerStdlib.getMemoryControlGroupControllerName(grp),
                                 : 					_ManagerStdlib.getMemoryControlGroupName(grp),
                                 : 					"addrgen_" + _ManagerStdlib.getMemoryControlGroupName(grp) + ".",
                                 : 					_ManagerStdlib.getMemoryControlGroupType(grp));
                                 : 			}
                                 : 
                                 : 			// ... for data streams
                                 : 			MaxFileXMacros memdata_macros = new MaxFileXMacros("MANAGER_MEMCTL_DATA_STREAM");
                                 : 			MaxFileManager.getMaxFileManager(_getBuildManager()).addMaxFileDataSegment(memdata_macros);
                                 : 
                                 : 			int streamnr = 0; // read before write, in the order as were added.
                                 : 			for (MemoryDirection dir : Arrays.asList(MemoryDirection.READ_FROM_MEMORY,
                                 : 				MemoryDirection.WRITE_TO_MEMORY)) {
                                 : 				for (MemoryControlGroup grp : m_memory_control_groups) {
                                 : 					for (String stream_name : _ManagerStdlib.getMemoryControlGroupStreams(grp)) {
                                 : 						if (m_memory_stream_direction.get(stream_name) == dir)
                                 : 						{
                                 : 							memdata_macros.addMacro(
                                 : 								_ManagerStdlib.getMemoryControlGroupControllerName(grp),
                                 : 								_ManagerStdlib.getMemoryControlGroupName(grp),
                                 : 								stream_name,
                                 : 								grp.getStreamIndexIdWithinGroup(stream_name),
                                 : 								streamnr,
                                 : 								m_memory_stream_direction.get(stream_name).toString());
                                 : 							streamnr++;
                                 : 						}
                                 : 					}
                                 : 				}
                                 : 			}
                                 : 		}
                                 : 	}
                                 : 
                                 : 	/**
                                 : 	 * Override in sub-classes to perform any pre-build tasks.
                                 : 	 */
                                 : 	@MaxCompilerHide
                                 : 	protected void finalise() {
                                 : 		// Should remain empty in CustomManager
                                 : 	}
                                 : 
                                 : 	private void preBuildOperations() {
                                 : 		finaliseExternCalls();
                                 : 		GenerateSlicHostCode.runPreBuildOperations(getWrapperDesignData());
                                 : 		buildDebugStreams();
                                 : 
                                 : 		finalise();
                                 : 		m_board_io.finalise();
                                 : 		processSlicIgnore();
                                 : 
                                 : 		// set address generators in the right clock domain
                                 : 		if (getManagerConfiguration().dram.getEnableAddressGeneratorsInSlowClock())
                                 : 			for (MemoryControlGroup grp : m_memory_control_groups) {
                                 : 				if (!_ManagerStdlib.isStreamSource(grp)) {  // non addr gen CMD q's can stay as they are
                                 : 				_ManagerStdlib.setMemoryControlGroupCommandStreamClock(
                                 : 					grp,
                                 : 					m_data.getWrapperParameterisation().m_cclk);
                                 : 				}
                                 : 			}
                                 : 
                                 : 		for (WrapperDefinition def : m_data.m_wrapper_args.iterateDefinitions()) {
                                 : 			def.validate();
                                 : 		}
                                 : 
                                 : 	}
                                 : 
                                 : 	private void processSlicIgnore() {
                                 : 		for (EngineInterface ei : getEngineInterfaces().values()) {
                                 : 			if (!ei.isUserCreated())
                                 : 				continue;
                                 : 
                                 : 			for (String name : m_slic_blocks_to_ignore) {
                                 : 				ei.ignoreKernel(name);
                                 : 			}
                                 : 
                                 : 			for (String name : m_slic_streams_to_ignore) {
                                 : 				ei.ignoreStream(name);
                                 : 			}
                                 : 
                                 : 			for (String name : m_slic_routing_to_ignore) {
                                 : 				ei.ignoreRoute(name);
                                 : 			}
                                 : 		}
                                 : 	}
                                 : 
                                 : 	private void finaliseExternCalls() {
                                 : 		for (BuildFile bf : m_externFiles) {
                                 : 			m_data.addSlicFile(bf, m_externFlags);
                                 : 		}
                                 : 	}
                                 : 
                                 : 	@MaxCompilerHide
                                 : 	protected FPGAWrapperEntity buildInternal() {
                                 : 		preBuildOperations();
                                 : 
                                 : 		WrapperCompileManager manager = new WrapperCompileManager(m_data);
                                 : 		manager.setEnableStreamStatus(m_enable_stream_status);
                                 : 		manager.setEnableStreamStatusChecksums(m_data.getManagerConfiguration().debug.hasStreamStatusChecksums());
                                 : 		WrapperDesignEntity test_entity = manager.build();
                                 : 
                                 : 		m_wrapper = new FPGAWrapperEntity(_getBuildManager(), m_data, test_entity);
                                 : 
                                 : 		// make X macros -- keep the code below IN SYNC with code found in buildHostCodeSim()!
                                 : 
                                 : 		// ... for memory controller as a whole
                                 : 		// FIXME! multiple memory controllers...
                                 : 		int blength = getMemoryWordSize(m_data.getBuildManager().getPlatform()) * m_data.getManagerConfiguration().dram.getBurstSize();
                                 : 
                                 : 		if (!m_memory_control_groups.isEmpty()) {
                                 : 			MaxFileXMacros mem_macro = new MaxFileXMacros("MANAGER_MEMCTL");
                                 : 			MaxFileManager.getMaxFileManager(_getBuildManager()).addMaxFileDataSegment(mem_macro);
                                 : 			mem_macro.addMacro(
                                 : 				_ManagerStdlib.getMemoryControlGroupControllerName(m_memory_control_groups.get(0)),
                                 : 				"MemoryControllerPro.MemoryControllerPro",
                                 : 				blength);
                                 : 		}
                                 : 
                                 : 		// ... for control groups
                                 : 		MaxFileXMacros memctrl_macros = new MaxFileXMacros("MANAGER_MEMCTL_CONTROL_GROUP");
                                 : 		MaxFileManager.getMaxFileManager(_getBuildManager()).addMaxFileDataSegment(memctrl_macros);
                                 : 
                                 : 		for (MemoryControlGroup grp : m_memory_control_groups) {
                                 : 			memctrl_macros.addMacro(
                                 : 				_ManagerStdlib.getMemoryControlGroupControllerName(grp),
                                 : 				_ManagerStdlib.getMemoryControlGroupName(grp),
                                 : 				_ManagerStdlib.getMemoryControlGroupRegName(grp),
                                 : 				_ManagerStdlib.getMemoryControlGroupType(grp));
                                 : 		}
                                 : 		// ... for data streams
                                 : 		MaxFileXMacros memdata_macros = new MaxFileXMacros("MANAGER_MEMCTL_DATA_STREAM");
                                 : 		MaxFileManager.getMaxFileManager(_getBuildManager()).addMaxFileDataSegment(memdata_macros);
                                 : 
                                 : 		for (MemoryDirection dir : Arrays.asList(MemoryDirection.READ_FROM_MEMORY,
                                 : 			MemoryDirection.WRITE_TO_MEMORY)) {
                                 : 			for (MemoryControlGroup grp : m_memory_control_groups) {
                                 : 				for (String stream_name : _ManagerStdlib.getMemoryControlGroupStreams(grp)) {
                                 : 					if (m_memory_stream_direction.get(stream_name) == dir)
                                 : 						memdata_macros.addMacro(
                                 : 							_ManagerStdlib.getMemoryControlGroupControllerName(grp),
                                 : 							_ManagerStdlib.getMemoryControlGroupName(grp),
                                 : 							stream_name,
                                 : 							grp.getStreamIndexIdWithinGroup(stream_name),
                                 : 							m_wrapper.getMemoryStreamId(
                                 : 								_ManagerStdlib.getMemoryControlGroupControllerName(grp),
                                 : 								stream_name),
                                 : 							m_memory_stream_direction.get(stream_name).toString());
                                 : 				}
                                 : 			}
                                 : 		}
                                 : 
                                 : 		MaxFileManager.getMaxFileManager(_getBuildManager()).addMaxFileConstant("ON_CARD_MEMORY_FREQUENCY",
                                 : 			(int) m_board_io.getOnCardMemoryFrequency());
                                 : 
                                 : 		return m_wrapper;
                                 : 	}
                                 : 
                                 : 	/*
                                 : 	 * Stream routing
                                 : 	 */
                                 : 
                                 : 	public Mux mux(String name) {
                                 : 		Mux mux = _ManagerBlocks.mux(m_routing.mux(name));
                                 : 		mux.setClock(peekDefaultClock());
                                 : 		return mux;
                                 : 	}
                                 : 
                                 : 	public Demux demux(String name) {
                                 : 		Demux demux = _ManagerBlocks.demux(m_routing.demux(name));
                                 : 		demux.setClock(peekDefaultClock());
                                 : 		return demux;
                                 : 	}
                                 : 
                                 : 	public Fanout fanout(String name) {
                                 : 		Fanout fanout = _ManagerBlocks.fanout(m_routing.fanout(name));
                                 : 		fanout.setClock(peekDefaultClock());
                                 : 		return fanout;
                                 : 	}
                                 : 
                                 : 	/*
                                 : 	 * Kernel
                                 : 	 */
                                 : 
                                 : 	public KernelBlock addKernel(Kernel kernel) {
     102     207       0       0 : 		final WrapperNodePhoton photon = m_photon_factory.addPhotonCore(kernel);
                                 : 		photon.setClock(peekDefaultClock().toImp());
                                 : 
                                 : 		final PhotonIOInformation io_info = _Kernel.getPhotonDesignData(kernel).getIOInformation();
                                 : 		final int almostEmptyLatency = photon.getInputAlmostEmptyLatency();
                                 : 
                                 : 		// create manager blocks to handle arbitrated inputs
                                 : 		final List<WrapperNodeStateMachine> arbitrators = new ArrayList<WrapperNodeStateMachine>();
                                 : 		for (Map.Entry<String, ArbitratedInput> arb_input : io_info.getArbitratedInputs().entrySet()) {
                                 : 			InputArbitrator sm = new InputArbitrator(this, arb_input.getValue(), almostEmptyLatency);
                                 : 			String name = kernel.getName() + "_" + arb_input.getKey();
                                 : 			WrapperNodeStateMachine input_arbitrator = addStateMachineInternal(name, sm);
                                 : 
                                 : 			// connect state machine output to arbitrated kernel input
                                 : 			photon.getInput(arb_input.getKey()).connect(input_arbitrator.getOutput("output"));
                                 : 			arbitrators.add(input_arbitrator);
                                 : 		}
                                 : 
                                 : 		// create manager blocks to handle non-blocking inputs
                                 : 		final Map<String, WrapperNodeStateMachine> non_blockers = new HashMap<String, WrapperNodeStateMachine>();
                                 : 		for (Map.Entry<String, PhotonIOInformation.NonBlockingInput> input : io_info.getNonBlockingInputs().entrySet()) {
                                 : 			final String input_name = input.getKey();
                                 : 			final PhotonIOInformation.NonBlockingInput inputInfo = input.getValue();
                                 : 
                                 : 			// block that is connected to by users in the manager
                                 : 			WrapperNodeStateMachine intermediateBlock;
                                 : 			// stream that gets connected to the kernel
                                 : 			com.maxeler.maxeleros.managercompiler.core.Stream streamIntoKernel;
                                 : 
                                 : 			Flushing flushing = null;
                                 : 			WrapperNodeStateMachine smFlushing = null;
                                 : 
                                 : 			switch (inputInfo.mode) {
                                 : 				case NO_TRICKLING:
                                 : 					flushing = new Flushing(
                                 : 						this,
                                 : 						inputInfo.width,
                                 : 						inputInfo.delimiter,
                                 : 						inputInfo.delimiterMode,
                                 : 						almostEmptyLatency,
                                 : 						inputInfo.interFrameGap
                                 : 					);
                                 : 					smFlushing = addStateMachineInternal(
                                 : 						kernel.getName() + "_flushing_" + input_name,
                                 : 						flushing
                                 : 					);
                                 : 
                                 : 					if (!flushing.isSingleCycleFrame()) {
                                 : 						TinyFIFO tinyFIFO = new TinyFIFO(
                                 : 							this,
                                 : 							inputInfo.width,
                                 : 							almostEmptyLatency,
                                 : 							true
                                 : 						);
                                 : 						WrapperNodeStateMachine smTinyFIFO = addStateMachineInternal(
                                 : 							kernel.getName() + "_tinyfifo_" + input_name,
                                 : 							tinyFIFO
                                 : 						);
                                 : 
                                 : 						smTinyFIFO.getInput("input").connect(smFlushing.getOutput("output"));
                                 : 						streamIntoKernel = smTinyFIFO.getOutput("output");
                                 : 					} else
                                 : 						streamIntoKernel = smFlushing.getOutput("output");
                                 : 
                                 : 					intermediateBlock = smFlushing;
                                 : 
                                 : 					break;
                                 : 				case TRICKLING:
                                 : 					flushing = new Flushing(
                                 : 						this,
                                 : 						inputInfo.width,
                                 : 						inputInfo.delimiter,
                                 : 						inputInfo.delimiterMode,
                                 : 						almostEmptyLatency,
                                 : 						inputInfo.interFrameGap
                                 : 					);
                                 : 					smFlushing = addStateMachineInternal(
                                 : 						kernel.getName() + "_flushing_" + input_name,
                                 : 						flushing
                                 : 					);
                                 : 
                                 : 					intermediateBlock = smFlushing;
                                 : 					streamIntoKernel = smFlushing.getOutput("output");
                                 : 					break;
                                 : 				default:
                                 : 					throw new MaxCompilerInternalError(kernel.getManager(), "Unknown non-blocking mode '%s'.", inputInfo.mode);
                                 : 			}
                                 : 
                                 : 			// connect state machines to kernel input
                                 : 			photon.getInput(input_name).connect(streamIntoKernel);
                                 : 			non_blockers.put(input_name, intermediateBlock);
                                 : 		}
                                 : 
                                 : 		return _ManagerBlocks.kernel(photon, arbitrators, non_blockers);
                                 : 	}
                                 : 
                                 : 	DFELink addStreamFromFile(String file_name, int bit_width) {
                                 : 		WrapperNodeFileSource file_source =
                                 : 			new WrapperNodeFileSource(m_data, file_name, bit_width);
                                 : 
                                 : 		return new DFELink(file_source.getOutput("output"));
                                 : 	}
                                 : 
                                 : 	DFELink addStreamToFile(String file_name, int bit_width) {
                                 : 		WrapperNodeFileSink file_sink =
                                 : 			new WrapperNodeFileSink(m_data, file_name, bit_width);
                                 : 
                                 : 		return new DFELink(file_sink.getInput("input"));
                                 : 	}
                                 : 
                                 : 	KernelBlock addKernel(KernelDesign kernel) {
                                 : 		WrapperNodeV0Photon photon = m_photon_factory.addPhotonCore(kernel);
                                 : 		photon.setClock(peekDefaultClock().toImp());
                                 : 		return _ManagerBlocks.kernel(photon);
                                 : 	}
                                 : 
                                 : 	/*
                                 : 	 * State machine
                                 : 	 */
                                 : 
                                 : 	@MaxCompilerHide
                                 : 	private WrapperNodeStateMachine addStateMachineInternal(String name, ManagerStateMachine stateMachine) {
                                 : 		StateMachineInstance<ManagerStateMachine> instance;
                                 : 		try {
                                 : 			instance = new StateMachineInstance<ManagerStateMachine>(stateMachine);
                                 : 			instance.checkForPartialAssignments(getBuildManager(), name);
                                 : 		} catch (InvalidStateMachineException e) {
                                 : 			throw new MaxCompilerAPIError(this, "Invalid state machine: %s.", e.getMessage());
                                 : 		}
                                 : 		WrapperNodeStateMachine node = new WrapperNodeStateMachine(m_data, name, instance);
                                 : 		node.setClock(peekDefaultClock().toImp());
                                 : 
                                 : 		return node;
                                 : 	}
                                 : 
                                 : 	public StateMachineBlock addStateMachine(String name, ManagerStateMachine stateMachine) {
                                 : 		WrapperNodeStateMachine node = addStateMachineInternal(name, stateMachine);
                                 : 		return _ManagerBlocks.stateMachine(node);
                                 : 	}
                                 : 
                                 : 	/*
                                 : 	 * Custom VHDL
                                 : 	 */
                                 : 
                                 : 	public CustomHDLBlock addCustomHDL(CustomHDLNode node) {
                                 : 		return _ManagerBlocks.customVHDLBlock(node);
                                 : 	}
                                 : 
                                 : 	private void buildDebugStreams() {
                                 : 		boolean hasDebugStreams = false;
                                 : 		for (WrapperNode node : m_data.getNodes()) {
                                 : 			if (node.getDebugStream() != null) {
                                 : 				hasDebugStreams = true;
                                 : 				break;
                                 : 			}
                                 : 		}
                                 : 
                                 : 		if (!hasDebugStreams)
                                 : 			return;
                                 : 
                                 : 		final DFELink hostPrintfStream = addStreamToCPU(ConnectDebugStreams.debugStreamName, StreamMode.LOW_LATENCY_ENABLED);
                                 : 
                                 : 		m_data.setDebugHostStream(_CustomManagers.streamToImp(hostPrintfStream));
                                 : 	}
                                 : 
                                 : 	/*
                                 : 	 *  Streams from/to CPU
                                 : 	 */
                                 : 
                                 : 	public DFELink addStreamFromCPU(String name) {
                                 : 		return addStreamFromCPU(name,StreamMode.ONLY_THROUGHPUT);
                                 : 	}
                                 : 
                                 : 	public DFELink addStreamFromCPU(String name, final StreamMode stream_mode) {
                                 : 		return m_board_io.addStreamFromHost(name, new PCIeStream.StreamCapabilities(stream_mode));
                                 : 	}
                                 : 
                                 : 
                                 : 	public DFELink addStreamToCPU(String name) {
                                 : 		return addStreamToCPU(name,StreamMode.ONLY_THROUGHPUT);
                                 : 	}
                                 : 
                                 : 	public DFELink addStreamToCPU(String name, final StreamMode stream_mode) {
                                 : 		return m_board_io.addStreamToHost(name, new PCIeStream.StreamCapabilities(stream_mode));
                                 : 	}
                                 : 
                                 : 	/*
                                 : 	 *  Inter-FPGA streams
                                 : 	 */
                                 : 
                                 : 	public MaxRingBidirectionalStream addMaxRingBidirectionalStream(String name, Max2RingConnection connection) {
                                 : 		m_used_maxring_connections.add(connection);
                                 : 		return m_board_io.addMaxRingBirectionalStream(name, connection);
                                 : 	}
                                 : 
                                 : 	public MaxRingBidirectionalStream addMaxRingBidirectionalStream(String name, Max3RingConnection connection) {
                                 : 		m_used_maxring_connections.add(connection);
                                 : 		return m_board_io.addMaxRingBirectionalStream(name, connection);
                                 : 	}
                                 : 
                                 : 	public MaxRingBidirectionalStream addMaxRingBidirectionalStream(String name, Max4RingConnection connection) {
                                 : 		m_used_maxring_connections.add(connection);
                                 : 		return m_board_io.addMaxRingBirectionalStream(name, connection);
                                 : 	}
                                 : 
                                 : 	public MaxRingBidirectionalStream addMaxRingBidirectionalStream(String name, MaxRingConnection connection) {
                                 : 		m_used_maxring_connections.add(connection);
                                 : 		return m_board_io.addMaxRingBirectionalStream(name, connection);
                                 : 	}
                                 : 
                                 : 	/*
                                 : 	 * Memory streams
                                 : 	 */
                                 : 
                                 : 	public DFELink addStreamToOnCardMemory(String name, MemoryAccessPattern pattern) {
                                 : 		return addStreamToOnCardMemory(name, addMemoryControlGroup("cmd_" + name, pattern));
                                 : 	}
                                 : 
                                 : 	public DFELink addStreamFromOnCardMemory(String name, MemoryAccessPattern pattern) {
                                 : 		return addStreamFromOnCardMemory(name, addMemoryControlGroup("cmd_" + name, pattern));
                                 : 	}
                                 : 
                                 : 	//Use this, specifying SingleLink config if single link DVI is needed. A Dual Link DVI configuration will drive a
                                 : 	//Single Link display with no issue - just don't send pixel data on the second set of data words (R2,G2,B2) -
                                 : 	//implementations should always use dual link infrastructure unless there is a good reason to do otherwise (e.g.
                                 : 	//the design does not meet timing.
                                 : 	//Metadata is only output when the transmitters are configured for dual link.
                                 : 	public DFELink getVideoStream(String name, VideoConfiguration configuration){
                                 : 		return getBoardIOInterface().getVideoStream(name, configuration);
                                 : 	}
                                 : 
                                 : 	public DFELink getVideoStream(String name, float pixelClockRate){
                                 : 		return getBoardIOInterface().getVideoStream(name, new VideoConfiguration(pixelClockRate));
                                 : 	}
                                 : 
                                 : 	// debug stream
                                 : 	public DFELink getDebugStreamFromOnCardMemory(String name) {
                                 : 		return getDebugStreamFromCardMemory(name);
                                 : 	}
                                 : 
                                 : 	public DFELink addStreamToOnCardMemory(String name, DFELink control_stream) {
                                 : 		return addStreamToOnCardMemory(name, addMemoryControlGroup("cmd_" + name, control_stream));
                                 : 	}
                                 : 
                                 : 	public DFELink addStreamFromOnCardMemory(String name, DFELink control_stream) {
                                 : 		return addStreamFromOnCardMemory(name, addMemoryControlGroup("cmd_" + name, control_stream));
                                 : 	}
                                 : 
                                 : 	private void addMemoryStream(String name, MemoryDirection dir) {
                                 : 		m_memory_stream_direction.put(name, dir);
                                 : 		if (m_num_memory_streams++ > m_maximum_memory_streams)
                                 : 			throw new MaxCompilerAPIError(this, "Tried to create > " + m_maximum_memory_streams + " memory streams.");
                                 : 	}
                                 : 
                                 : 	public DFELink addStreamToOnCardMemory(String name, MemoryControlGroup control_stream) {
                                 : 		addMemoryStream(name, MemoryDirection.WRITE_TO_MEMORY);
                                 : 
                                 : 		DFELink stream = m_board_io.addStreamToOnCardMemory(name, control_stream);
                                 : 		if(getManagerConfiguration().getBoardModel().getBoardGeneration() == MaxelerBoardGen.MAX4_Maia ||
                                 : 		   getManagerConfiguration().getBoardModel().getBoardGeneration() == MaxelerBoardGen.MAX4_Isca ||
                                 : 		   getManagerConfiguration().getBoardModel().getBoardGeneration() == MaxelerBoardGen.MAX4_Galava ) {
                                 : 			setEnableHideMemoryParityBits(stream, true);
                                 : 		}
                                 : 		return stream;
                                 : 	}
                                 : 
                                 : 	public DFELink addStreamFromOnCardMemory(String name, MemoryControlGroup control_stream) {
                                 : 		addMemoryStream(name, MemoryDirection.READ_FROM_MEMORY);
                                 : 		DFELink stream = m_board_io.addStreamFromOnCardMemory(name, control_stream);
                                 : 		if(getManagerConfiguration().getBoardModel().getBoardGeneration() == MaxelerBoardGen.MAX4_Maia ||
                                 : 		   getManagerConfiguration().getBoardModel().getBoardGeneration() == MaxelerBoardGen.MAX4_Isca ||
                                 : 		   getManagerConfiguration().getBoardModel().getBoardGeneration() == MaxelerBoardGen.MAX4_Galava) {
                                 : 			setEnableHideMemoryParityBits(stream, true);
                                 : 		}
                                 : 		return stream;
                                 : 	}
                                 : 
                                 : 	public DFELink addOnCardMemoryCommandCompletionStream(MemoryControlGroup control_stream) {
                                 : 		if (m_memory_command_completion_streams.containsKey(control_stream))
                                 : 			throw new MaxCompilerAPIError(this, "Memory control group '%s' already has a command completion stream.", control_stream.getName());
                                 : 
                                 : 		DFELink stream = m_board_io.addOnCardMemoryCommandCompletionStream(control_stream);
                                 : 
                                 : 		m_memory_command_completion_streams.put(control_stream, stream);
                                 : 
                                 : 		m_data.getManagerConfiguration().dram.enableCommandEchoMode();
                                 : 
                                 : 		return stream;
                                 : 	}
                                 : 
                                 : 	public DFELink getDebugStreamFromCardMemory(String name) {
                                 : 		return m_board_io.getDebugStreamFromCardMemory(name);
                                 : 	}
                                 : 
                                 : 	public MemoryControlGroup addMemoryControlGroup(String name, DFELink control_stream) {
                                 : 		MemoryControlGroup grp = m_board_io.addMemoryControlGroup(name, control_stream);
                                 : 		m_memory_control_groups.add(grp);
                                 : 		return grp;
                                 : 	}
                                 : 
                                 : 	public MemoryControlGroup addMemoryControlGroup(String name, MemoryAccessPattern pattern) {
                                 : 		MemoryControlGroup grp = m_board_io.addMemoryControlGroup(name, pattern);
                                 : 		m_memory_control_groups.add(grp);
                                 : 		return grp;
                                 : 	}
                                 : 
                                 : 	public DFELink addStreamToQMem(QMem qmem) {
                                 : 		if (isTargetSimulation())
                                 : 			throw new MaxCompilerAPIError(this, "QMem currently not supported in simulation");
                                 : 
                                 : 		getManagerConfiguration().persona.setEnableQDR2(true);
                                 : 		return m_board_io.addStreamToQMem(qmem);
                                 : 	}
                                 : 
                                 : 	public DFELink addStreamFromQMem(QMem qmem) {
                                 : 		if (isTargetSimulation())
                                 : 			throw new MaxCompilerAPIError(this, "QMem currently not supported in simulation");
                                 : 
                                 : 		getManagerConfiguration().persona.setEnableQDR2(true);
                                 : 		return m_board_io.addStreamFromQMem(qmem);
                                 : 	}
                                 : 
                                 : 	int getPCIeStreamFromHostIdFromName(String name) {
                                 : 		ArrayList<String> streams = new ArrayList<String>();
                                 : 		for (WrapperDefinition def : m_data.m_wrapper_args.iterateDefinitions()) {
                                 : 			if (def instanceof PCIExpressDefinition) {
                                 : 				PCIExpressDefinition pcie_def = (PCIExpressDefinition) def;
                                 : 				int i=0;
                                 : 				for (PCIeStream sfh : pcie_def.m_pcie_from_host) {
                                 : 					if (sfh.getName().equals(name))
                                 : 						return i;
                                 : 					streams.add(sfh.getName());
                                 : 					i++;
                                 : 				}
                                 : 			} else if (def instanceof AsymmetricInterChipDefinition) {
                                 : 				int stream_no = 0;
                                 : 				for (AIStream stream : ((AsymmetricInterChipDefinition)def).m_from_other_fpga) {
                                 : 					if (stream.getName().equals(name))
                                 : 						return stream_no;
                                 : 					streams.add(stream.getName());
                                 : 					stream_no++;
                                 : 				}
                                 : 			}
                                 : 		}
                                 : 		throw new MaxCompilerAPIError(this, "Stream from CPU '" + name + "' does not exist. Available streams are: " + streams.toString());
                                 : 	}
                                 : 
                                 : 	int getControlStreamFromHost() {
                                 : 		int i=0;
                                 : 		for (WrapperDefinition def : m_data.m_wrapper_args.iterateDefinitions()) {
                                 : 			if (def instanceof PCIExpressDefinition) {
                                 : 				PCIExpressDefinition pcie_def = (PCIExpressDefinition) def;
                                 : 				i += pcie_def.m_pcie_from_host.size();
                                 : 			}
                                 : 		}
                                 : 		return i;
                                 : 	}
                                 : 
                                 : 	int getPCIeStreamToHostIdFromName(String name) {
                                 : 		ArrayList<String> streams = new ArrayList<String>();
                                 : 		for (WrapperDefinition def : m_data.m_wrapper_args.iterateDefinitions()) {
                                 : 			if (def instanceof PCIExpressDefinition) {
                                 : 				PCIExpressDefinition pcie_def = (PCIExpressDefinition) def;
                                 : 				int i=0;
                                 : 				for (PCIeStream sth : pcie_def.m_pcie_to_host) {
                                 : 					if (sth.getName().equals(name))
                                 : 						return i;
                                 : 					streams.add(sth.getName());
                                 : 					i++;
                                 : 				}
                                 : 			} else if (def instanceof AsymmetricInterChipDefinition) {
                                 : 				int stream_no = 0;
                                 : 				for (AIStream stream : ((AsymmetricInterChipDefinition)def).m_to_other_fpga) {
                                 : 					if (stream.getName().equals(name))
                                 : 						return stream_no;
                                 : 					streams.add(stream.getName());
                                 : 					stream_no++;
                                 : 				}
                                 : 			}
                                 : 		}
                                 : 		throw new MaxCompilerAPIError(this, "Stream to CPU '" + name + "' does not exist. Available streams are: " + streams.toString());
                                 : 	}
                                 : 
                                 : 	boolean hasMemory() {
                                 : 		return m_num_memory_streams > 0 ? true : false;
                                 : 	}
                                 : 
                                 : 	boolean fullCalSim() {
                                 : 		return m_data.getManagerConfiguration().debug.hasFullCalSim();
                                 : 	}
                                 : 
                                 : 	@MaxCompilerHide
                                 : 	public void setIFPGALinkClock(WrapperClock clock) {
                                 : 		m_board_io.setIFPGALinkClock(clock);
                                 : 	}
                                 : 
                                 : 	@MaxCompilerHide
                                 : 	public void setMemoryStreamClock(WrapperClock clock) {
                                 : 		m_board_io.setMemoryStreamClock(clock);
                                 : 	}
                                 : 
                                 : 	MappedElementsManager getMappedElementsManager() {
                                 : 		return m_wrapper.getMappedElementsManager();
                                 : 	}
                                 : 
                                 : 	DFELink addFWStreamToCompute(String name) {
                                 : 		_MAX3InterfaceIOInterface iface_io = (_MAX3InterfaceIOInterface) m_board_io;
                                 : 		return iface_io.addFWStreamToCompute(name);
                                 : 	}
                                 : 
                                 : 	DFELink addFWStreamFromCompute(String name) {
                                 : 		_MAX3InterfaceIOInterface iface_io = (_MAX3InterfaceIOInterface) m_board_io;
                                 : 		return iface_io.addFWStreamFromCompute(name);
                                 : 	}
                                 : 
                                 : 	WrapperDesignData getWrapperDesignData() {
                                 : 		return m_data;
                                 : 	}
                                 : 
                                 : 	WrapperClock getStreamClock() {
                                 : 		return m_streamclk;
                                 : 	}
                                 : 
                                 : 	MappedElementsInfo getMappedElementsInfo() {
                                 : 		return m_wrapper.getMappedElementsInfo();
                                 : 	}
                                 : 
                                 : 	public void setEnableHideMemoryParityBits(DFELink stream, boolean hide_parity_bits) {
                                 : 		m_board_io.setEnableHideParityBitsForStream(stream, hide_parity_bits);
                                 : 	}
                                 : 
                                 : 	@MaxCompilerHide
                                 : 	@Override
                                 : 	protected final void finaliseConfig() {
                                 : 		// save final memory controller config ...
                                 : 		if (config.m_memConfig != null)
                                 : 			config.m_memConfig.saveToManagerConfig(m_data.getManagerConfiguration().dram);
                                 : 
                                 : 		// get final values of debug level
                                 : 		if (debug.m_debug_level != null)
                                 : 			debug.m_debug_level.updateConfig(m_data.getManagerConfiguration().debug);
                                 : 
                                 : 		configurePersona(getManagerConfiguration().persona);
                                 : 	}
                                 : 
                                 : 	@MaxCompilerHide
                                 : 	@Override
                                 : 	protected void realBuild() {
                                 : 		if(isTargetSimulation() && !m_simulate_in_modelsim) {
                                 : 			buildCPUCodeSim();
                                 : 			Platform<?,?> platform = _getBuildManager().getPlatform();
                                 : 			if(!(platform instanceof MaxelerOSPlatform))
                                 : 				throw new MaxCompilerInternalError(this, "Not a MaxelerOS platform.");
                                 : 
                                 : 			MaxelerOSPlatform maxPlatform = (MaxelerOSPlatform)platform;
                                 : 
                                 : 			MaxFileManager mgm = MaxFileManager.getMaxFileManager(_getBuildManager());
                                 : 			mgm.addMaxFileDataSegment(maxPlatform.getMaxFileCapabilitiesData());
                                 : 
                                 : 			// Set up the build passes
                                 : 			_getBuildManager().addBuildPass(new GenerateMaxFileDataFile());
                                 : 			_getBuildManager().addBuildPass(new SimCompilePass(Mode.SHARED_OBJECT, m_data));
                                 : 			_getBuildManager().addBuildPass(new AddSimObjectToMaxFilePass());
                                 : 
                                 : 			// Build
                                 : 			_getBuildManager().runBuildPasses();
                                 : 			_getBuildManager().finalizeBuild();
                                 : 		} else if (m_simulate_in_modelsim) {
                                 : 			throw new MaxCompilerAPIError(this, "When targetting HDL simulation a design cannot be built. Use HDLTestBench.runTest() to run a simulation.");
                                 : 		} else {
                                 : 			FPGAWrapperEntity wrapper = buildInternal();
                                 : 
                                 : 			Entity top = m_board_capabilties.createTop(
                                 : 				"max_compiler_top",
                                 : 				_getBuildManager(),
                                 : 				wrapper,
                                 : 				m_data.getTopLevelParameterisation());
                                 : 
                                 : 			_Managers.runBuild(this, top);
                                 : 		}
                                 : 	}
                                 : 
                                 : 	_ManagerSimulator getManagerSimulator() {
                                 : 		return m_manager_sim;
                                 : 	}
                                 : 
                                 : 	public HDLTestBench getHDLTestBench() {
                                 : 		if(m_sim_transactor == null)
                                 : 			throw new MaxCompilerAPIError(
                                 : 				this,
                                 : 				"Cannot get a HDL Test Bench as this manager has not been constructed with support for " +
                                 : 				"HDL simulation. Enable this by using the appopriate CustomManager constructor.");
                                 : 
                                 : 		if (m_sim_transactor.m_manager_regs.hasMemory() == true && m_sim_transactor.isMAX3() == true)
                                 : 			getManagerSimulator().setEnableUseGlbl(true);
                                 : 
                                 : 		return m_sim_transactor;
                                 : 	}
                                 : 
                                 : 	/**
                                 : 	 * Add an interface to the manager.
                                 : 	 * @param engineInterface the engine interface to add
                                 : 	 * The name must be distinct from any interface already added to the manager
                                 : 	 */
                                 : 	@Deprecated
                                 : 	public void addInterface(GeneratedInterface engineInterface) {
                                 : 		createSLiCinterface(engineInterface);
                                 : 	}
                                 : 
                                 : 	/**
                                 : 	 * Add a SLiC interface for this maxfile.
                                 : 	 * The interface name must be distinct from any interface already added to the manager.
                                 : 	 *
                                 : 	 * @param engineInterface the interface to add.
                                 : 	 */
                                 : 	public void createSLiCinterface(GeneratedInterface engineInterface) {
                                 : 		for (Resource r : engineInterface.getFileDependencies())
                                 : 			addSLiCCompileFile(r.makeBuildFile(getBuildManager()));
                                 : 
                                 : 		m_data.addMode(engineInterface.getImplementation());
                                 : 	}
                                 : 
                                 : 	/**
                                 : 	 * Suppress the "default" interface from being generated in the SLiC static interface.
                                 : 	 */
                                 : 	public void suppressDefaultInterface() {
                                 : 		m_data.suppressDefaultMode();
                                 : 	}
                                 : 
                                 : 	/**
                                 : 	 * Get a list of EngineInterfaces in this manager.
                                 : 	 * <p>
                                 : 	 * Note the list is intentionally restricted to <b>EngineInterfaces</b>, and omits any <b>ExternInterfaces</b>.
                                 : 	 */
                                 : 	public Map<String, EngineInterface> getEngineInterfaces() {
                                 : 		Map<String, EngineInterface> result   = new HashMap<String, EngineInterface>();
                                 : 		Map<String, GeneratedMode>   genModes = m_data.getGeneratedModes();
                                 : 		for (Entry<String, GeneratedMode> entry : genModes.entrySet()) {
                                 : 			if (entry.getValue() instanceof EngineMode)
                                 : 				result.put(entry.getKey(), new EngineInterface((EngineMode) entry.getValue()) );
                                 : 		}
                                 : 		return Collections.unmodifiableMap(result);
                                 : 	}
                                 : 
                                 : 	/**
                                 : 	 * Set the clock that will be assigned when adding Kernels and state-machines.
                                 : 	 * This will initially be the "stream clock" which is a special clock, adjustable
                                 : 	 * at run-time from CPU code.
                                 : 	 *
                                 : 	 * @param clock to be used when adding new manager blocks.
                                 : 	 */
                                 : 	public void pushDefaultClock(ManagerClock clock) {
                                 : 		m_default_clock_stack.push(clock);
                                 : 	}
                                 : 
                                 : 	/**
                                 : 	 * @see #pushDefaultClock(ManagerClock)
                                 : 	 */
                                 : 	public ManagerClock peekDefaultClock() {
                                 : 		return m_default_clock_stack.peek();
                                 : 	}
                                 : 
                                 : 	/**
                                 : 	 * @see #pushDefaultClock(ManagerClock)
                                 : 	 */
                                 : 	public void popDefaultClock() {
                                 : 		m_default_clock_stack.pop();
                                 : 	}
                                 : 
                                 : 	public void pushNodeGroup(String group) {
                                 : 		m_data.pushNodeGroup(group);
                                 : 	}
                                 : 
                                 : 	public String peekNodeGroup() {
                                 : 		return m_data.peekNodeGroup();
                                 : 	}
                                 : 
                                 : 	public String popNodeGroup() {
                                 : 		return m_data.popNodeGroup();
                                 : 	}
                                 : 
                                 : 
                                 : 	/**
                                 : 	 * On supported platforms sets the clock to use for all IFPGA data DFELinks.
                                 : 	 */
                                 : 	public void setIDFELinkClock(ManagerClock clock) {
                                 : 		m_board_io.setIFPGALinkClock(clock.toImp());
                                 : 	}
                                 : 
                                 : 	/**
                                 : 	 * On supported platforms sets the clock to use for the memory controller.
                                 : 	 */
                                 : 	public void setMemoryStreamClock(ManagerClock clock) {
                                 : 		m_board_io.setMemoryStreamClock(clock.toImp());
                                 : 	}
                                 : 
                                 : 	/**
                                 : 	 * On supported platforms sets the clock to use for all host data DFELinks.
                                 : 	 */
                                 : 	public void setCPUStreamClock(ManagerClock clock) {
                                 : 		m_board_io.setIFPGALinkClock(clock.toImp());
                                 : 	}
                                 : 
                                 : 	@MaxCompilerHide
                                 : 	public void slicIgnoreBlock(String name) {
                                 : 		m_slic_blocks_to_ignore.add(name);
                                 : 	}
                                 : 
                                 : 	@MaxCompilerHide
                                 : 	public void slicIgnoreStream(String name) {
                                 : 		m_slic_streams_to_ignore.add(name);
                                 : 	}
                                 : 
                                 : 	@MaxCompilerHide
                                 : 	public void slicIgnoreRoute(String name) {
                                 : 		m_slic_routing_to_ignore.add(name);
                                 : 	}
                                 : 
                                 : 	@MaxCompilerHide
                                 : 	/**
                                 : 	 * Configures the persona based on the streams used in the design.
                                 : 	 * Override this method to modify options in the persona.
                                 : 	 */
                                 : 	protected void configurePersona(ManagerPersonaConfiguration persona) {
                                 : 		// Only want to override the persona config if it is off/in init mode.
                                 : 		PersonaMode pm = persona.getMode();
                                 : 		if (pm == PersonaMode.UpdateMode_BuildPersona || pm == PersonaMode.UpdateMode_ConsumePersona)
                                 : 			return;
                                 : 
                                 : 		// Set the board model
                                 : 		MaxelerBoardModel model = getManagerConfiguration().getBoardModel();
                                 : 		persona.setBoardModel(model);
                                 : 
                                 : 		// Print a warning if the user changed from init mode to 'off'
                                 : 		if ((model.isAltera()) &&
                                 : 			 pm == PersonaMode.Off)
                                 : 			getBuildManager().logWarning("PersonaMode set to 'off' - the generated bitstream can not be configured using CvP but needs to be loaded via JTAG");
                                 : 
                                 : 		// Put all the used stream clocks into the persona
                                 : 		Set<WrapperClock> clocks = m_data.m_all_clocks;
                                 : 		Set<Float> unique_frequencies = new LinkedHashSet<Float>();
                                 : 		for (WrapperClock clock : clocks)
                                 : 			unique_frequencies.add(clock.getRate());
                                 : 		persona.setStreamFrqs(new ArrayList<Float>(unique_frequencies));
                                 : 		persona.setStreamClocks(unique_frequencies.size());
                                 : 
                                 : 		// Phase is always 0 for the moment
                                 : 		Integer[] phases = new Integer[unique_frequencies.size()];
                                 : 		for (int i = 0; i < phases.length; ++i)
                                 : 			phases[i] = 0;
                                 : 		persona.setStreamPs(Arrays.asList(phases));
                                 : 
                                 : 		// Add MaxRing streams
                                 : 		for (MaxRingConnection conn : m_used_maxring_connections) {
                                 : 			if (conn instanceof Max4RingConnection) {
                                 : 				switch ((Max4RingConnection)conn) {
                                 : 					case MAXRING_A:       persona.setEnableMaxRingA(true);       break;
                                 : 					case MAXRING_B:       persona.setEnableMaxRingB(true);       break;
                                 : 					case MAXRING_LOCAL:   persona.setEnableMaxRingLocal(true);   break;
                                 : 					case MAXRING_OPTICAL: persona.setEnableMaxRingOptical(true);
                                 : 				}
                                 : 			} else if(conn instanceof Max4MAIARingConnection) {
                                 : 				switch ((Max4MAIARingConnection)conn) {
                                 : 					case MAXRING_A:         persona.setEnableMaxRingA(true);       break;
                                 : 					case MAXRING_B:         persona.setEnableMaxRingB(true);       break;
                                 : 					case MAXRING_LOCAL_BOTTOM:
                                 : 					case MAXRING_LOCAL_TOP: persona.setEnableMaxRingLocal(true);   break;
                                 : 					case MAXRING_OPTICAL:   persona.setEnableMaxRingOptical(true);
                                 : 				}
                                 : 			} else if(conn instanceof Max4GALAVARingConnection) {
                                 : 				switch ((Max4GALAVARingConnection)conn) {
                                 : 					case MAXRING_A:         persona.setEnableMaxRingA(true);       break;
                                 : 					case MAXRING_B:         persona.setEnableMaxRingB(true);       break;
                                 : 					case MAXRING_LOCAL_BOTTOM:
                                 : 					case MAXRING_LOCAL_TOP: persona.setEnableMaxRingLocal(true);   break;
                                 : 					case MAXRING_OPTICAL:   persona.setEnableMaxRingOptical(true);
                                 : 				}
                                 : 			}
                                 : 		}
                                 : 
                                 : 		// Setup Network
                                 : 		for(NetworkConnection net : m_used_network_connections){
                                 : 			if(net instanceof Max4NetworkConnection){
                                 : 				switch((Max4NetworkConnection)net) {
                                 : 					case QSFP_BOT_10G_PORT1:
                                 : 					case QSFP_BOT_10G_PORT2:
                                 : 					case QSFP_BOT_10G_PORT3:
                                 : 					case QSFP_BOT_10G_PORT4:
                                 : 						persona.setQSFPModeBOT(QSFPMode.QSFP_10G);
                                 : 						break;
                                 : 					case QSFP_BOT_40G:
                                 : 						persona.setQSFPModeBOT(QSFPMode.QSFP_40G);
                                 : 						break;
                                 : 
                                 : 					case QSFP_MID_10G_PORT1:
                                 : 					case QSFP_MID_10G_PORT2:
                                 : 					case QSFP_MID_10G_PORT3:
                                 : 					case QSFP_MID_10G_PORT4:
                                 : 						persona.setQSFPModeMID(QSFPMode.QSFP_10G);
                                 : 						break;
                                 : 					case QSFP_MID_40G:
                                 : 						persona.setQSFPModeMID(QSFPMode.QSFP_40G);
                                 : 						break;
                                 : 
                                 : 					case QSFP_TOP_10G_PORT1:
                                 : 					case QSFP_TOP_10G_PORT2:
                                 : 					case QSFP_TOP_10G_PORT3:
                                 : 					case QSFP_TOP_10G_PORT4:
                                 : 						persona.setQSFPModeTOP(QSFPMode.QSFP_10G);
                                 : 						break;
                                 : 					case QSFP_TOP_40G:
                                 : 						persona.setQSFPModeTOP(QSFPMode.QSFP_40G);
                                 : 						break;
                                 : 					case PTP:
                                 : 						persona.setPTPMode(PTPMode.SER);
                                 : 						break;
                                 : 				}
                                 : 			}
                                 : 		}
                                 : 
                                 : 		// Setup DDR3
                                 : 		// There is a suspicious lack of options in the persona for DRAM...
                                 : 		persona.setEnableDDR3(m_num_memory_streams != 0);
                                 : 		persona.setDDR3Freq(getManagerConfiguration().dram.getOnCardMemoryFrequency());
                                 : 		persona.setDDR3Qmode(getManagerConfiguration().dram.getMAX4qMode());
                                 : 	}
                                 : 
                                 : 	/**
                                 : 	 * Add flags that will be used when compiling source code. For example to
                                 : 	 * link with the C math library (i.e. {@code math.h}) this should be set to
                                 : 	 * {@code "-lm"}.
                                 : 	 * @param flags
                                 : 	 */
                                 : 	@MaxCompilerHide
                                 : 	public void addSLiCCompileFlags(List<String> flags) {
                                 : 		m_externFlags.addAll(flags);
                                 : 	}
                                 : 
                                 : 	@MaxCompilerHide
                                 : 	public void addSLiCCompileFile(BuildFile bf) {
                                 : 		m_externFiles.add(bf);
                                 : 	}
                                 : }
