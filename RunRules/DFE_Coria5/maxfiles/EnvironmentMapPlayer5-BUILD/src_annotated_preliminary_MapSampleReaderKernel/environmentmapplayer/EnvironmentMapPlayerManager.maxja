    LUTs     FFs   BRAMs    DSPs : EnvironmentMapPlayerManager.maxj
     900    4887       1       0 : resources used by this file
   0.26%   0.71%   0.05%   0.00% : % of available
   0.64%   2.15%   0.09%   0.00% : % of total used
   0.78%   2.96%   0.18%   0.00% : % of user resources

                                 : package environmentmapplayer;
                                 : 
                                 : import maxvideo.MaxVideoSignalKernel;
                                 : import maxvideo.VideoCounter;
                                 : 
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler._KernelConfiguration;
                                 : import com.maxeler.maxcompiler.v2.managers.BuildConfig;
                                 : import com.maxeler.maxcompiler.v2.managers.BuildConfig.OptimizationTechnique;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
                                 : import com.maxeler.maxcompiler.v2.managers.custom._CustomManagers;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
                                 : import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup.MemoryAccessPattern;
                                 : import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
                                 : import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
                                 : import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;
                                 : import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
                                 : import com.maxeler.maxeleros.managercompiler.core.WrapperClock;
                                 : 
                                 : import displaystandards.DisplayStandard;
                                 : 
                                 : public class EnvironmentMapPlayerManager extends CustomManager {
                                 : 
                                 : 	public EnvironmentMapPlayerManager(EnvironmentMapPlayerEngineParameters engineParameters) throws Exception {
                                 : 		super(engineParameters);
                                 : 
                                 : 		DebugLevel myDebugLevel = new DebugLevel();
                                 : 		myDebugLevel.setHasStreamStatus(true);
                                 : 		debug.setDebugLevel(myDebugLevel);
                                 : 
                                 : 		//disable trickling
                                 : 		_KernelConfiguration.getPhotonKernelConfig(getCurrentKernelConfig()).setEnableSmartKernelControl(true);
                                 : 
                                 : 		config.setDefaultStreamClockFrequency(220);
                                 : 		config.setOnCardMemoryFrequency(533); //400 for maia
                                 : 
                                 : 		/*MemoryControllerConfig mcc = new MemoryControllerConfig();
                                 : 		config.setOnCardMemoryFrequency(800);
                                 : 		mcc.setMAX4qMode(true);
                                 : 		mcc.setBurstSize(8);
                                 : 		mcc.setEnableParityMode(true, true, 72, false);
                                 : 		mcc.setEnableFlagCommands(true);
                                 : 		config.setMemoryControllerConfig(mcc);*/
                                 : 
                                 : 	//	MemoryControllerConfig mcc = new MemoryControllerConfig();
                                 : 	//	mcc.setCMDQSize(64);
                                 : 		//mcc.setCmdFIFOPipelineRegInBlockRAM(false); //trade off lut usage for better timing.
                                 : 	//	mcc.setEnableParityMode(false, false, 0, false);
                                 : 	//	config.setMemoryControllerConfig(mcc);
                                 : 
                                 : 		DisplayStandard displayStandard = DisplayStandard.make_RiftDK2();
                                 : 		displayStandard.AddMaxFileConstants(this);
                                 : 		VideoCounter.displayStandard = displayStandard;
                                 : 
                                 : 
                                 : 		KernelBlock raySampleCommandGeneratorKernel = addKernel(new RaySampleCommandGeneratorKernel(makeKernelParameters("RaySampleCommandGeneratorKernel"), displayStandard));
                                 : 		KernelBlock raySampleReaderKernel = addKernel(new RaySampleReaderKernel(makeKernelParameters("RaySampleReaderKernel")));
                                 : 
                                 : 		KernelBlock rayCasterKernel = addKernel(new RayCasterKernel(makeKernelParameters("RayCasterKernel")));
                                 : 
                                 : 		KernelBlock commandGeneratorKernel = addKernel(new MapSampleCommandGeneratorKernel(makeKernelParameters("MapSampleCommandGeneratorKernel")));
                                 : 
     891    4873       0       0 : 		KernelBlock mapSampleReaderKernel = addKernel(new MapSampleReaderKernel(makeKernelParameters("MapSampleReaderKernel")));
                                 : 
                                 : 		/* Connect the Ray Caster to the inputs from the CPU */
                                 : 
                                 : 		rayCasterKernel.getInput("cameraUpdates").connect(addStreamFromCPU("cameraUpdates",StreamMode.LOW_LATENCY_ENABLED));
                                 : 
                                 : 		addStreamToOnCardMemory("environment_map", MemoryAccessPattern.LINEAR_1D) <== addStreamFromCPU("environment_map_in",StreamMode.LOW_LATENCY_ENABLED);
                                 : 
                                 : 		/* Insert the distortion/ray sample parameter kernel between the frame counters and the ray sampler inputs to modify the row and columns sampled within the camera ONB */
                                 : 
                                 : 		rayCasterKernel.getInput("sampleParameters").connect(raySampleReaderKernel.getOutput("sampleParameters"));
                                 : 
                                 : 		/* Connect the sample parameter command generator & reader kernels to memory */
                                 : 
                                 : 		raySampleReaderKernel.getInput("sample_parameter_read_data").connect(addStreamFromOnCardMemory("sample_parameter_memory_stream", raySampleCommandGeneratorKernel.getOutput("sample_parameter_read_command")));
                                 : 
                                 : 		/* Connect the Ray Caster and Colour Sampling Kernels Together */
                                 : 
                                 : 		commandGeneratorKernel.getInput("plane").connect(rayCasterKernel.getOutput("plane"));
                                 : 		commandGeneratorKernel.getInput("miplevel").connect(rayCasterKernel.getOutput("miplevel"));
                                 : 		commandGeneratorKernel.getInput("u").connect(rayCasterKernel.getOutput("u"));
                                 : 		commandGeneratorKernel.getInput("v").connect(rayCasterKernel.getOutput("v"));
                                 : 
                                 : 		DFELink sample_memory_stream = addStreamFromOnCardMemory("sample_memory_stream", commandGeneratorKernel.getOutput("sample_command"));
                                 : 		mapSampleReaderKernel.getInput("burst_input").connect(sample_memory_stream);
                                 : 
                                 : 		//increase the buffer between command generator and reader, for the cache valid/sample offsets, to maximise prediction
                                 : 
                                 : 		DFELink cache_valid_stream = commandGeneratorKernel.getOutput("cache_valid");
                                 : 		int cache_valid_stream_buffer_size = 1 * 4096;
                                 : 		_CustomManagers.setStreamBufferSpaceRequirement(cache_valid_stream, cache_valid_stream_buffer_size);
                                 : 		mapSampleReaderKernel.getInput("cache_valid").connect(cache_valid_stream);
                                 : 
                                 : 		DFELink sample_offset_in_pixels_stream = commandGeneratorKernel.getOutput("sample_offset_in_pixels");
                                 : 		int sample_offset_in_pixels_stream_buffer_size = 32 * 4096;
                                 : 		_CustomManagers.setStreamBufferSpaceRequirement(sample_offset_in_pixels_stream, sample_offset_in_pixels_stream_buffer_size);
                                 : 		mapSampleReaderKernel.getInput("sample_offset_in_pixels").connect(sample_offset_in_pixels_stream);
                                 : 
                                 : 		/* Create the kernel which will generate the timing data */
                                 : 		KernelBlock videoSignalKernel = addKernel(new MaxVideoSignalKernel(makeKernelParameters("MaxVideoSignalKernel"), displayStandard));
                                 : 
                                 : 		/* connect up the kernel to the colour data */
                                 : 		DFELink video_colour_data_stream = mapSampleReaderKernel.getOutput("sample");
                                 : 		int video_colour_data_stream_buffer_size = 24 * 4096;
                                 : 		_CustomManagers.setStreamBufferSpaceRequirement(video_colour_data_stream, video_colour_data_stream_buffer_size);
                                 : 		videoSignalKernel.getInput("rgb").connect(video_colour_data_stream);
                                 : 
                                 : 		/* Finally configure the video data outputs and clocking */
                                 : 
                                 : 		DFELink videoStreamOut = getVideoStream("videoStream", 165.0f);
                                 : 		videoStreamOut.connect(videoSignalKernel.getOutput("displayDataOut"));
                                 : 
                                 : 		WrapperClock videoStreamClk = _CustomManagers.streamToImp(videoStreamOut).getSink().getClock();
                                 : 		videoSignalKernel.setClock(_CustomManagers.fromImp(videoStreamClk));
                                 : 
                                 : //		addStreamToCPU("displayDataOut",StreamMode.LOW_LATENCY_ENABLED).connect(videoSignalKernel.getOutput("displayDataOut"));
                                 : 
                                 : //		DFELink videoDataStream = videoSignalKernel.getOutput("displayDataOut");
                                 : //		int videoDataStreamBufferSize = 64 * 12442;
                                 : //		_CustomManagers.setStreamBufferSpaceRequirement(videoDataStream, videoDataStreamBufferSize);
                                 : //		getVideoStream("videoStream", 165.0f).connect(videoDataStream);
                                 : 
                                 : 		configBuild(engineParameters);
                                 : 	}
                                 : 
                                 : 	private static EngineInterface memoryInitialisationInterface()
                                 : 	{
                                 : 		EngineInterface engine_interface = new EngineInterface("memoryInitialisation");
                                 : 
                                 : 		InterfaceParam lmem_size = engine_interface.addParam("size", CPUTypes.INT32);
                                 : 		InterfaceParam lmem_address = engine_interface.addParam("address", CPUTypes.INT32);
                                 : 		engine_interface.setLMemLinear("environment_map", lmem_address, lmem_size);
                                 : 		engine_interface.setStream("environment_map_in", CPUTypes.INT32, lmem_size / 4);
                                 : 
                                 : 		engine_interface.ignoreAll(Direction.IN_OUT);
                                 : 
                                 : 		return engine_interface;
                                 : 	}
                                 : 
                                 : 
                                 : 	/*
                                 : 	private static EngineInterface modeDefault() {
                                 : 		EngineInterface engine_interface = new EngineInterface();
                                 : 		CPUTypes   type = CPUTypes.INT32;
                                 : 		int        size = type.sizeInBytes();
                                 : 
                                 : //		InterfaceParam  a    = engine_interface.addParam("A", CPUTypes.INT);
                                 : 		InterfaceParam  N    = engine_interface.addParam("N", CPUTypes.INT);
                                 : 
                                 : //		engine_interface.setScalar(s_kernelName, "a", a);
                                 : 
                                 : 		engine_interface.setTicks(s_kernelName, N);
                                 : 		engine_interface.setStream("x",   type, N * size);
                                 : 		engine_interface.setStream("y",   type, N * size);
                                 : 		engine_interface.setStream("s", type, N * size);
                                 : 		return engine_interface;
                                 : 	}
                                 : 	*/
                                 : 
                                 : 	private void configBuild(EnvironmentMapPlayerEngineParameters params) {
                                 : 		BuildConfig buildConfig = getBuildConfig();
                                 : 		buildConfig.setMPPRCostTableSearchRange(1, 16);
                                 : 		buildConfig.setMPPRParallelism(4);
                                 : 		buildConfig.setMPPRRetryNearMissesThreshold(500);
                                 : 		buildConfig.setOptimizationGoal(OptimizationTechnique.AREA);
                                 : 	}
                                 : 
                                 : 	public static void main(String[] args) throws Exception {
     891    4873       0       0 : 		EnvironmentMapPlayerManager manager = new EnvironmentMapPlayerManager(new EnvironmentMapPlayerEngineParameters(args));
                                 : 
                                 : 		manager.createSLiCinterface(memoryInitialisationInterface());
                                 : 
       9      14       1       0 : 		manager.build();
                                 : 	}
                                 : }
