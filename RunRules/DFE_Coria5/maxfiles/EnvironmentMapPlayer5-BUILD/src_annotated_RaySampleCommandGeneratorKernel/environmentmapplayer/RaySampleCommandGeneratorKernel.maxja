    LUTs     FFs   BRAMs    DSPs : RaySampleCommandGeneratorKernel.maxj
    1525    1386       4       7 : resources used by this file
   0.44%   0.20%   0.20%   0.44% : % of available
   0.92%   0.58%   0.31%   7.78% : % of total used
   1.31%   0.92%   0.70%   7.78% : % of user resources

                                 : package environmentmapplayer;
                                 : 
                                 : import maxvideo.VideoCounter;
                                 : 
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;
                                 : 
                                 : import displaystandards.DisplayStandard;
                                 : 
                                 : class RaySampleCommandGeneratorKernel extends Kernel {
                                 : 
                                 : 	private static final DFEType dfefloat = dfeFloat(8, 24);
                                 : 
                                 : 	public static final DFEStructType SampleParameters_t =
                                 : 		new DFEStructType(
                                 : 				DFEStructType.sft("col", dfefloat),
                                 : 				DFEStructType.sft("row", dfefloat),
                                 : 				DFEStructType.sft("cam_scalar", dfeInt(8)));
                                 : 
                                 : 	public static final int burstCount = 4;
                                 : 	public static final int burstSizeInBytes = 384;
                                 : 
                                 : 	protected RaySampleCommandGeneratorKernel(KernelParameters parameters, DisplayStandard displayStandard) throws Exception {
                                 : 		super(parameters);
                                 : 
                                 : 		flush.disabled();
                                 : 
                                 : 		optimization.pushPipeliningFactor(0.25);
                                 : 
      67      69       0       0 : 		VideoCounter counters = new VideoCounter(this, VideoCounter.Scope.ActiveOnly);
                                 : 		DFEVar col = counters.x.cast(dfeInt(32));
                                 : 		DFEVar row = counters.y.cast(dfeInt(32));
                                 : 
                                 : 		DFEVar offset = io.scalarInput("sampleParameterMapAddress", dfeUInt(32));
                                 : 
                                 : 		/* Compute the address (in bursts) and offset of the sample to be read */
                                 : 
                                 : 		float word_size_in_bytes = burstSizeInBytes * burstCount;
                                 : 		int bits_per_sample = SampleParameters_t.getTotalBits();
                                 : 		float bytes_per_sample = bits_per_sample / 8;
                                 : 		int samples_per_word = (int) Math.floor(word_size_in_bytes / bytes_per_sample);
                                 : 
      32      32       0       2 : 		DFEVar sample_address_in_samples = (row * displayStandard.H_Active) + col;
    1379    1251       4       5 : 		DFEVar sample_address_in_words = KernelMath.floor(sample_address_in_samples.cast(dfefloat) / samples_per_word).cast(dfeUInt(32));
      30      32       0       0 : 		DFEVar sample_address_in_bursts = offset + (sample_address_in_words * RaySampleCommandGeneratorKernel.burstCount);
                                 : 
                                 : 		/* Determine whether this read needs to read from the memory, or whether the downstream kernel will be able to determine that it can read from the cache */
                                 : 
                                 :         DFEVar previous_address_in_bursts = stream.offset(sample_address_in_bursts, -1);
      17       1       0       0 :         DFEVar cache_valid = previous_address_in_bursts.eq(sample_address_in_bursts);
                                 : 
       0       1       0       0 : 		LMemCommandStream.makeKernelOutput(
                                 : 				"sample_parameter_read_command",
                                 : 				~cache_valid,
                                 : 				sample_address_in_bursts.cast(dfeUInt(28)),
                                 : 				constant.var(dfeUInt(8),burstCount),
                                 : 				constant.var(dfeUInt(7),1),
                                 : 				constant.var(dfeUInt(4),0),
                                 : 				constant.var(false));
                                 : 
                                 : 		optimization.popPipeliningFactor();
                                 : 
                                 : 	}
                                 : 
                                 : }
