package environmentmapplayer;

import java.util.ArrayList;
import java.util.List;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

public class MapSampleReaderKernel extends Kernel {

	protected MapSampleReaderKernel(KernelParameters parameters) {
		super(parameters);

		flush.disabled();

		DFEVar bgColour = io.scalarInput("backgroundColour", dfeUInt(24));

		int	burst_size_in_bytes = 384;
		int burst_size_in_bits = burst_size_in_bytes * 8;

		int bits_per_pixel = EnvironmentParameters.pixel_size_in_bytes * 8;
		int pixels_per_word = (int)Math.floor((float)burst_size_in_bytes/(float)EnvironmentParameters.pixel_size_in_bytes);

		DFEVar cache_valid = io.input("cache_valid", dfeBool());

		DFEVar burst = io.input("burst_input",dfeRawBits(burst_size_in_bits),~cache_valid);
		DFEVar cached_burst = Reductions.streamHold(burst, ~cache_valid);

		DFEVar sample_offset_in_pixels = io.input("sample_offset_in_pixels",dfeUInt(32));

		List<DFEVar> samples = new ArrayList<DFEVar>();
		for(int i = 0; i < pixels_per_word; i++)
		{
			samples.add(cached_burst.slice(i * bits_per_pixel, bits_per_pixel));
		}
		DFEVar sample_content = control.mux(sample_offset_in_pixels.cast(dfeUInt(MathUtils.bitsToAddress(samples.size()))), samples).slice(0,24).cast(dfeUInt(24));

		sample_content = (sample_offset_in_pixels > 96) ? bgColour : sample_content;

		io.output("sample", dfeUInt(24)) <== sample_content;
	}


}
