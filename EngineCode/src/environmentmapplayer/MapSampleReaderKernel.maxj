package environmentmapplayer;

import java.util.ArrayList;
import java.util.List;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.DelimiterMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingInput;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelObject;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

public class MapSampleReaderKernel extends Kernel {

	protected DFEVar clamp(DFEVar v, int min, int max)
	{
		v = v > max ? constant.var(max) : v;
		v = v < min ? constant.var(min) : v;
		return v;
	}

	private <T extends KernelObject<T>> T makeNonBlockingInput(String name, KernelType<T> type)
	{
		NonBlockingInput<T> input =
			io.nonBlockingInput(name, type, constant.var(true), 1, DelimiterMode.FRAME_LENGTH, 0, NonBlockingMode.NO_TRICKLING);
		T data = Reductions.streamHold(input.data, input.valid);

		// should be enabled on every run

		Counter validCounter = control.count.makeCounter(control.count.makeParams(32).withEnable(input.valid));

		io.scalarOutput(name + "_validCount", dfeUInt(32)).connect(validCounter.getCount());

		return data;
	}

	private <T extends KernelObject<T>> T makeNonBlockingInput(String name, KernelType<T> type, DFEVar enable)
	{
		NonBlockingInput<T> input =
			io.nonBlockingInput(name, type, constant.var(true), 1, DelimiterMode.FRAME_LENGTH, 0, NonBlockingMode.NO_TRICKLING);
		T data = Reductions.streamHold(input.data, input.valid);

		Counter validCounter = control.count.makeCounter(control.count.makeParams(32).withEnable(input.valid));
		Counter enableCounter = control.count.makeCounter(control.count.makeParams(32).withEnable(enable));

		Counter wouldStallCounter = control.count.makeCounter(control.count.makeParams(32).withEnable(enable & (~input.valid)));

		io.scalarOutput(name + "_validCount", dfeUInt(32)).connect(validCounter.getCount());
		io.scalarOutput(name + "_enableCount", dfeUInt(32)).connect(enableCounter.getCount());

		io.scalarOutput(name + "_WouldStallCount", dfeUInt(32)).connect(wouldStallCounter.getCount());

		return data;
	}

	protected MapSampleReaderKernel(KernelParameters parameters) {
		super(parameters);

		flush.disabled();

		DFEVar bgColour = io.scalarInput("backgroundColour", dfeUInt(32));

		int bursts_per_word = Constants.map_word_size_in_bytes / Constants.burstSizeInBytes;

		int	word_size_in_bytes = Constants.burstSizeInBytes * bursts_per_word;
		int word_size_in_bits = word_size_in_bytes * 8;

		int bits_per_pixel = Constants.pixel_size_in_bytes * 8;
//		int pixels_per_sample = (int)Math.floor((float)map_sample_size_in_bytes/(float)Constants.pixel_size_in_bytes);
		int pixels_per_word = Constants.tiles_per_word * Constants.tile_width_in_pixels * Constants.tile_width_in_pixels;



		DFEVar cache_valid = io.input("cache_valid", dfeBool());
		DFEVar dimm = io.input("dimm", dfeUInt(1));

		DFEVar sampleDimm1 = io.input("sampleMap_fromDimm1",dfeRawBits(word_size_in_bits),~cache_valid & dimm.eq(0));
		DFEVar sampleDimm2 = io.input("sampleMap_fromDimm2",dfeRawBits(word_size_in_bits),~cache_valid & dimm.eq(1));
		DFEVar burst = control.mux(dimm, sampleDimm1, sampleDimm2);
		DFEVar cached_burst = Reductions.streamHold(burst, ~cache_valid);

		DFEVar sample_offset_in_pixels = io.input("sample_offset_in_pixels",dfeUInt(32));

		/*
		DFEVar cache_valid = makeNonBlockingInput("cache_valid", dfeBool());

		DFEVar burst = makeNonBlockingInput("sampleMap_fromDimm1",dfeRawBits(map_sample_size_in_bits),~cache_valid);
		DFEVar cached_burst = Reductions.streamHold(burst, ~cache_valid);

		DFEVar sample_offset_in_pixels = makeNonBlockingInput("sample_offset_in_pixels",dfeUInt(32));

		Counter runCounter = control.count.makeCounter(control.count.makeParams(32));
		io.scalarOutput("runCounter", dfeUInt(32)).connect(runCounter.getCount());
		*/

		sample_offset_in_pixels = clamp(sample_offset_in_pixels, 0, pixels_per_word);

		List<DFEVar> samples = new ArrayList<DFEVar>();
		for(int i = 0; i < pixels_per_word; i++)
		{
			samples.add(cached_burst.slice(i * bits_per_pixel, bits_per_pixel));
		}
		samples.add(bgColour.cast(dfeRawBits(32)));
		DFEVar sample_content = control.mux(sample_offset_in_pixels.cast(dfeUInt(MathUtils.bitsToAddress(samples.size()+1))), samples).slice(0,24).cast(dfeUInt(24));

		io.output("sample", dfeUInt(24)) <== sample_content;
	}


}
