package environmentmapplayer;

import java.util.ArrayList;
import java.util.List;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

public class MapSampleReaderKernel extends Kernel {

	protected DFEVar clamp(DFEVar v, int min, int max)
	{
		v = v > max ? constant.var(max) : v;
		v = v < min ? constant.var(min) : v;
		return v;
	}

	protected MapSampleReaderKernel(KernelParameters parameters) {
		super(parameters);

		flush.disabled();

		DFEVar bgColour = io.scalarInput("backgroundColour", dfeUInt(32));

		int	sample_word_size_in_bytes = Constants.burstSizeInBytes * Constants.GetBurstsPerTile();
		int sample_word_size_in_bits = sample_word_size_in_bytes * 8;
		int bits_per_pixel = Constants.pixel_size_in_bytes * 8;
		int pixels_per_word = (int)Math.floor(sample_word_size_in_bytes / Constants.pixel_size_in_bytes);

		DFEVar cache_valid = io.input("cache_valid", dfeBool());
		DFEVar dimm = io.input("dimm", dfeUInt(1));
		DFEVar sample_offset_in_pixels = io.input("sample_offset_in_pixels", dfeUInt(32));

		DFEVar sampleDimm1 = io.input("sampleMap_fromDimm1",dfeRawBits(sample_word_size_in_bits),~cache_valid & dimm.eq(0));
		DFEVar sampleDimm2 = io.input("sampleMap_fromDimm2",dfeRawBits(sample_word_size_in_bits),~cache_valid & dimm.eq(1));
		DFEVar burst = control.mux(dimm, sampleDimm1, sampleDimm2);
		DFEVar cached_burst = Reductions.streamHold(burst, ~cache_valid);

		sample_offset_in_pixels = clamp(sample_offset_in_pixels, 0, pixels_per_word);

		List<DFEVar> samples = new ArrayList<DFEVar>();
		for(int i = 0; i < pixels_per_word; i++)
		{
			samples.add(cached_burst.slice(i * bits_per_pixel, bits_per_pixel));
		}
		samples.add(bgColour.cast(dfeRawBits(32)));
		DFEVar sample_content = control.mux(sample_offset_in_pixels.cast(dfeUInt(MathUtils.bitsToAddress(samples.size()+1))), samples).slice(0,24).cast(dfeUInt(24));

		io.output("sample", dfeUInt(24)) <== sample_content;
	}


}
