package environmentmapplayer;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;


public class EnvironmentMapSampleCommandGeneratorKernelSimple extends Kernel {

	protected EnvironmentMapSampleCommandGeneratorKernelSimple(KernelParameters parameters) throws Exception {
		super(parameters);

		flush.disabled();

		DFEVar plane = io.input("plane", dfeUInt(8));
		DFEVar miplevel = io.input("miplevel", dfeUInt(8));
		DFEVar u = io.input("u", dfeFloat(8, 24));
		DFEVar v = io.input("v", dfeFloat(8, 24));

		int face_width = 768;
		int face_height = face_width;

        DFEVar face_offset_in_rows = KernelMath.floor((plane.cast(dfeUInt(32)) * face_height).cast(dfeFloat(8, 24)) + (v * face_height));
        DFEVar face_offset_in_cols = KernelMath.floor(u * face_width);
		DFEVar address_in_pixels = (face_offset_in_rows * face_width) + face_offset_in_cols;

		int burst_size_bytes = 384;
		int pixel_size_bytes = 4;
		int pixels_per_burst = burst_size_bytes / pixel_size_bytes;

		/* For now we do it the naive way - one command for one sample */

		DFEVar address_in_bursts = KernelMath.floor(address_in_pixels / pixels_per_burst).cast(dfeUInt(32));
		DFEVar sample_offset_into_burst_in_pixels = KernelMath.modulo(address_in_pixels.cast(dfeUInt(32)), pixels_per_burst);

		sample_offset_into_burst_in_pixels = (plane === 255) ? constant.var(100) : sample_offset_into_burst_in_pixels;

        io.output("cache_valid", dfeBool()).connect(constant.var(false));

		LMemCommandStream.makeKernelOutput(
				"sample_command",
				constant.var(true),
				address_in_bursts.cast(dfeUInt(28)),
				constant.var(dfeUInt(8),1),
				constant.var(dfeUInt(7),1),
				constant.var(dfeUInt(4),0),
				constant.var(false));

		io.output("sample_offset_in_pixels", dfeUInt(32)) <== sample_offset_into_burst_in_pixels.cast(dfeUInt(32));

	}



}
