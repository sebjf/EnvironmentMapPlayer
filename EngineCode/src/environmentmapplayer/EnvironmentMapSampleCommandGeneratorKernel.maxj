package environmentmapplayer;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

public class EnvironmentMapSampleCommandGeneratorKernel extends Kernel {

	protected DFEVar clamp(DFEVar v, int min, int max)
	{
		v = v > max ? constant.var(max) : v;
		v = v < min ? constant.var(min) : v;
		return v;
	}

	protected EnvironmentMapSampleCommandGeneratorKernel(KernelParameters parameters) throws Exception {
		super(parameters);

		flush.disabled();

		/* Read sample parameters from ray caster */

		DFEVar plane = io.input("plane", dfeUInt(8));
		DFEVar miplevel = io.input("miplevel", dfeUInt(8));
		DFEVar u = io.input("u", dfeFloat(8, 24));
		DFEVar v = io.input("v", dfeFloat(8, 24));

		/* Restrict the mip level to those contained within the source map set */

		miplevel = clamp(miplevel, MapParameters.min_mip_level, MapParameters.max_mip_level);

		/* Compute basic parameters about the mip map in use for determining the memory address */

		DFEVar face_width_in_pixels = KernelMath.pow2(miplevel, dfeFloat(8,24));
		DFEVar face_width_in_tiles = face_width_in_pixels / MapParameters.tile_width_in_pixels;
		DFEVar tiles_per_face = face_width_in_tiles * face_width_in_tiles;

		/* Based on the mip level, determine which tile contains the sample */

		DFEVar tile_column = KernelMath.floor(u * face_width_in_tiles);
		DFEVar tile_row = KernelMath.floor(v * face_width_in_tiles);

		/* Calculate the offset into the tile of the individual sample */

		DFEVar tile_u = KernelMath.floor(u * face_width_in_pixels) - (MapParameters.tile_width_in_pixels * tile_column);
		DFEVar tile_v = KernelMath.floor(v * face_width_in_pixels) - (MapParameters.tile_width_in_pixels * tile_row);

        //Calculate the difference in size between two sequences of mip maps, to get the offset from the start (highest mip map) of the memory
        int distance_to_max_mip_in_pixels = (int)((1 - Math.pow(4, MapParameters.max_mip_level + 1)) / (1 - 4));
        //DFEVar mip_sequence_size_actual = (1 - KernelMath.pow2( KernelMath.pow2(miplevel + 1, dfeFloat(8,24)), dfeFloat(8,24))) / (1 - 4);

        //The following offset calculations are made assuming division of a single face
        DFEVar nominator_mip_width = KernelMath.pow2(miplevel + 1, dfeFloat(8,24));
        DFEVar nominator_mip_size = nominator_mip_width * nominator_mip_width;
        DFEVar nominator = (1 - nominator_mip_size);
        DFEVar distance_to_mip_in_pixels = nominator / (1-4);

        DFEVar mip_offset_in_pixels = distance_to_max_mip_in_pixels - distance_to_mip_in_pixels;
        DFEVar mip_offset_in_tiles = mip_offset_in_pixels * (MapParameters.num_faces/(Math.pow(MapParameters.tile_width_in_pixels, 2)));


		/* Convert these coordinate sets into memory addresses */

		DFEVar tile_offset_in_tiles = (tile_row * face_width_in_tiles) + tile_column; //In the current implementation one tile is one burst
        DFEVar face_offset_in_tiles = plane.cast(dfeFloat(8,24)) * tiles_per_face;


        DFEVar addr_burst = KernelMath.floor(tile_offset_in_tiles + face_offset_in_tiles + mip_offset_in_tiles);
        DFEVar addr_pixel = KernelMath.floor(tile_u + (tile_v * MapParameters.tile_width_in_pixels));

        /* Determine whether the sample can be read from the existing cache or if we need to retrieve a new tile */

        DFEVar previous_addr_burst = stream.offset(addr_burst, -1);
        DFEVar cache_valid = previous_addr_burst.eq(addr_burst);

        io.output("cache_valid", dfeBool()).connect(cache_valid);

        /*  */

		/*
		DFEStructType memoryCommand_t = LMemCommandStream.getLMemCommandDFEStructType();
		DFEStruct memoryCommand = memoryCommand_t.newInstance(this);

		memoryCommand["address"] = address_in_bursts;
		memoryCommand["size"] = constant.var(1).cast(dfeUInt(8));
		memoryCommand["inc"] = constant.var(1).cast(dfeUInt(8));
		memoryCommand["stream"] = constant.var(0).cast(dfeRawBits(15));
		memoryCommand["tag"] = constant.var(false);

		LMemCommandStream.makeKernelOutput("sample_command", constant.var(true), memoryCommand);
		*/

		LMemCommandStream.makeKernelOutput(
				"sample_command",
				~cache_valid,
				addr_burst.cast(dfeUInt(28)),
				constant.var(dfeUInt(8),1),
				constant.var(dfeUInt(7),1),
				constant.var(dfeUInt(4),0),
				constant.var(false));

		io.output("sample_offset_in_pixels", dfeUInt(32)) <== addr_pixel.cast(dfeUInt(32));

	}



}
