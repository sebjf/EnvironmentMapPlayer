package environmentmapplayer;

import java.util.ArrayList;
import java.util.List;

import maxvideo.VideoCounter;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.DelimiterMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingInput;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

public class RaySampleReaderKernel extends Kernel {

	private static final DFEType dfefloat = dfeFloat(8, 24);

	protected RaySampleReaderKernel(KernelParameters parameters) {
		super(parameters);

		flush.disabled();

		optimization.pushPipeliningFactor(0.25);

		VideoCounter counters = new VideoCounter(this, VideoCounter.Scope.ActiveOnly);
		DFEVar col = counters.x.cast(dfeInt(32));
		DFEVar row = counters.y.cast(dfeInt(32));

		/* Predict what command was last sent to the memory from the Ray Command Generator kernel upstream, and thus the offset into the data word
		 * and whether the cache is valid */

		int	word_size_in_bytes = RaySampleCommandGeneratorKernel.burstCount * RaySampleCommandGeneratorKernel.burstSizeInBytes;
		int word_size_in_bits = word_size_in_bytes * 8;
		int bits_per_sample = RaySampleCommandGeneratorKernel.SampleParameters_t.getTotalBits();
		float bytes_per_sample = bits_per_sample / 8;
		int samples_per_word = (int) Math.floor(word_size_in_bytes / bytes_per_sample);

		DFEVar sample_address_in_samples = (row * VideoCounter.displayStandard.H_Active) + col;

		DFEVar offset = io.scalarInput("sampleParameterMapAddress", dfeUInt(32));

		DFEVar sample_address_in_words = KernelMath.floor(sample_address_in_samples.cast(dfefloat) / samples_per_word).cast(dfeUInt(32));
		DFEVar sample_address_in_bursts = offset + (sample_address_in_words * RaySampleCommandGeneratorKernel.burstCount);

        DFEVar previous_address_in_bursts = stream.offset(sample_address_in_bursts, -1);

		DFEVar sample_offset_into_word_in_samples = KernelMath.modulo(sample_address_in_samples, samples_per_word);
        DFEVar cache_valid = previous_address_in_bursts.eq(sample_address_in_bursts);

        /* Read or do not read the memory accordingly */

		//DFEVar burst = io.input("sample_parameter_read_data", dfeRawBits(word_size_in_bits), ~cache_valid);

		NonBlockingInput<DFEVar> burst_input =
			io.nonBlockingInput("sample_parameter_read_data", dfeRawBits(word_size_in_bits), ~cache_valid,
					1, DelimiterMode.FRAME_LENGTH, 0, NonBlockingMode.NO_TRICKLING);
		DFEVar burst = Reductions.streamHold(burst_input.data, burst_input.valid);

		DFEVar failed_read = (~cache_valid) & (~(burst_input.valid));

		DFEVar failed_reads = control.count.makeCounter(control.count.makeParams(32).withEnable(failed_read)).getCount();
		io.scalarOutput("RaySampleReaderKernel", dfeUInt(32)).connect(failed_reads);
	//	debug.dfePrintf(failed_read, "Empty Memory on Read in RaySampleReaderKernel");

		DFEVar cached_burst = Reductions.streamHold(burst, ~cache_valid);

		// blocking the output will not help with sync since the counters will be out of order, but it may help with debugging elsewhere

		DFEVar force_output_enable = io.scalarInput("force_output_enable", dfeUInt(32));
		DFEVar output_enable = ~failed_read | (force_output_enable > constant.var(dfeUInt(32),0));

		/* Read the cache and extract the sample data */

		List<DFEVar> samples = new ArrayList<DFEVar>();
		for(int i = 0; i < samples_per_word; i++)
		{
			samples.add(cached_burst.slice(i * bits_per_sample, bits_per_sample));
		}
		DFEVar sample_content = control.mux(sample_offset_into_word_in_samples, samples);

		/* Output the sample data */

		io.output("sampleParameters", RaySampleCommandGeneratorKernel.SampleParameters_t, output_enable).connect(RaySampleCommandGeneratorKernel.SampleParameters_t.unpack(sample_content));

		optimization.popPipeliningFactor();
	}

}
