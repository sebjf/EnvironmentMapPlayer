package environmentmapplayer;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

public class RaySampleReaderKernel extends Kernel {

	protected RaySampleReaderKernel(KernelParameters parameters) {
		super(parameters);

		flush.disabled();

		int	burst_size_in_bytes = 384;
		int burst_size_in_bits = burst_size_in_bytes * 8;
		int bits_per_sample = RaySampleCommandGeneratorKernel.SampleParameters_t.getTotalBits();

		DFEVar cache_valid = io.input("cache_valid", dfeBool());
		DFEVar burst = io.input("sample_parameter_read_data", dfeRawBits(burst_size_in_bits), ~cache_valid);
		DFEVar sample_offset_into_burst_in_samples  = io.input("sample_offset_into_burst_in_samples", dfeUInt(32));

		DFEVar cached_burst = Reductions.streamHold(burst, ~cache_valid);

		/* Read the cache and extract the sample data */

		DFEVar sample_content_shifted = cached_burst.shiftRight((sample_offset_into_burst_in_samples.cast(dfeUInt(MathUtils.bitsToAddress(burst_size_in_bits))) * bits_per_sample));
		DFEVar sample_content = sample_content_shifted.slice(0, bits_per_sample);

		/* Output the sample data */

		io.output("sampleParameters", RaySampleCommandGeneratorKernel.SampleParameters_t).connect(RaySampleCommandGeneratorKernel.SampleParameters_t.unpack(sample_content));
	}

}
