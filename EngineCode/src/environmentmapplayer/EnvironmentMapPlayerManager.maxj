package environmentmapplayer;

import maxvideo.MaxVideoCounterKernel;
import maxvideo.MaxVideoSignalKernel;

import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom._CustomManagers;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup.MemoryAccessPattern;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

import displaystandards.DisplayStandard;

public class EnvironmentMapPlayerManager extends CustomManager {

	public EnvironmentMapPlayerManager(EnvironmentMapPlayerEngineParameters engineParameters) throws Exception {
		super(engineParameters);

		DebugLevel myDebugLevel = new DebugLevel();
		myDebugLevel.setHasStreamStatus(true);
		debug.setDebugLevel(myDebugLevel);

		config.setDefaultStreamClockFrequency(200.0f);
		config.setOnCardMemoryFrequency(475);


		DisplayStandard displayStandard = DisplayStandard.make_RiftDK2();
		displayStandard.AddMaxFileConstants(this);

		KernelBlock videoCounterKernel = addKernel(new MaxVideoCounterKernel(
				makeKernelParameters("MaxVideoCounterKernel"), displayStandard,
				new MaxVideoCounterKernel.CounterOutput("0", true),
				new MaxVideoCounterKernel.CounterOutput("_signal", false)));

		KernelBlock raySampleCommandGeneratorKernel = addKernel(new RaySampleCommandGeneratorKernel(makeKernelParameters("RaySampleCommandGeneratorKernel"), displayStandard));
		KernelBlock raySampleReaderKernel = addKernel(new RaySampleReaderKernel(makeKernelParameters("RaySampleReaderKernel")));

		KernelBlock rayCasterKernel = addKernel(new RayCasterKernel(makeKernelParameters("RayCasterKernel")));

		KernelBlock commandGeneratorKernel = addKernel(new MapSampleCommandGeneratorKernel(makeKernelParameters("MapSampleCommandGeneratorKernel")));
//		KernelBlock commandGeneratorKernel = addKernel(new EnvironmentMapSampleCommandGeneratorKernelSimple(makeKernelParameters("MapSampleCommandGeneratorKernelSimple")));

		KernelBlock mapSampleReaderKernel = addKernel(new MapSampleReaderKernel(makeKernelParameters("MapSampleReaderKernel")));

		KernelBlock videoSignalKernel = addKernel(new MaxVideoSignalKernel(makeKernelParameters("MaxVideoSignalKernel"), displayStandard));


		/* Connect the Ray Caster to the inputs from the CPU */

		rayCasterKernel.getInput("camera_eye").connect(addStreamFromCPU("camera_eye",StreamMode.LOW_LATENCY_ENABLED));
		rayCasterKernel.getInput("camera_lookat").connect(addStreamFromCPU("camera_lookat",StreamMode.LOW_LATENCY_ENABLED));
		rayCasterKernel.getInput("camera_up").connect(addStreamFromCPU("camera_up",StreamMode.LOW_LATENCY_ENABLED));

		addStreamToOnCardMemory("environment_map", MemoryAccessPattern.LINEAR_1D) <== addStreamFromCPU("environment_map_in",StreamMode.LOW_LATENCY_ENABLED);

		/* Insert the distortion/ray sample parameter kernel between the frame counters and the ray sampler inputs to modify the row and columns sampled within the camera ONB */

		raySampleCommandGeneratorKernel.getInput("col").connect(videoCounterKernel.getOutput("x0"));
		raySampleCommandGeneratorKernel.getInput("row").connect(videoCounterKernel.getOutput("y0"));

		rayCasterKernel.getInput("sampleParameters").connect(raySampleReaderKernel.getOutput("sampleParameters"));

		videoSignalKernel.getInput("x").connect(videoCounterKernel.getOutput("x_signal"));
		videoSignalKernel.getInput("y").connect(videoCounterKernel.getOutput("y_signal"));

		/* Connect the sample parameter command generator & reader kernels to memory and eachother*/

		raySampleReaderKernel.getInput("sample_parameter_read_data").connect(addStreamFromOnCardMemory("sample_parameter_memory_stream", raySampleCommandGeneratorKernel.getOutput("sample_parameter_read_command")));
		raySampleReaderKernel.getInput("cache_valid").connect(raySampleCommandGeneratorKernel.getOutput("cache_valid"));
		raySampleReaderKernel.getInput("sample_offset_into_burst_in_samples").connect(raySampleCommandGeneratorKernel.getOutput("sample_offset_into_burst_in_samples"));

		/* Connect the Ray Caster and Colour Sampling Kernels Together */

		commandGeneratorKernel.getInput("plane").connect(rayCasterKernel.getOutput("plane"));
		commandGeneratorKernel.getInput("miplevel").connect(rayCasterKernel.getOutput("miplevel"));
		commandGeneratorKernel.getInput("u").connect(rayCasterKernel.getOutput("u"));
		commandGeneratorKernel.getInput("v").connect(rayCasterKernel.getOutput("v"));

		DFELink sample_memory_stream = addStreamFromOnCardMemory("sample_memory_stream", commandGeneratorKernel.getOutput("sample_command"));

		mapSampleReaderKernel.getInput("cache_valid").connect(commandGeneratorKernel.getOutput("cache_valid"));
		mapSampleReaderKernel.getInput("burst_input").connect(sample_memory_stream);
		mapSampleReaderKernel.getInput("sample_offset_in_pixels").connect(commandGeneratorKernel.getOutput("sample_offset_in_pixels"));


		/* Connect up the video signal generator kernel and the clock signals  */

		videoSignalKernel.getInput("rgb").connect(mapSampleReaderKernel.getOutput("sample"));

		//extend the buffer between the signal counters and the signal kernel to prevent a stall in this link, before the rest of the graph has charged
		int signal_buffer_space_in_bits = 16 * 3024;
		_CustomManagers.setStreamBufferSpaceRequirement(videoSignalKernel.getInput("x"), signal_buffer_space_in_bits);
		_CustomManagers.setStreamBufferSpaceRequirement(videoSignalKernel.getInput("y"), signal_buffer_space_in_bits);

		/* Finally configure the video data outputs */

//		addStreamToCPU("displayDataOut",StreamMode.LOW_LATENCY_ENABLED).connect(videoSignalKernel.getOutput("displayDataOut"));
		getVideoStream("videoStream", displayStandard.PixelClock).connect(videoSignalKernel.getOutput("displayDataOut"));

		configBuild(engineParameters);
	}

	private static EngineInterface memoryInitialisationInterface()
	{
		EngineInterface engine_interface = new EngineInterface("memoryInitialisation");

		InterfaceParam lmem_size = engine_interface.addParam("size", CPUTypes.INT32);
		InterfaceParam lmem_address = engine_interface.addParam("address", CPUTypes.INT32);
		engine_interface.setLMemLinear("environment_map", lmem_address, lmem_size);
		engine_interface.setStream("environment_map_in", CPUTypes.INT32, lmem_size / 4);

		engine_interface.ignoreAll(Direction.IN_OUT);

		return engine_interface;
	}


	/*
	private static EngineInterface modeDefault() {
		EngineInterface engine_interface = new EngineInterface();
		CPUTypes   type = CPUTypes.INT32;
		int        size = type.sizeInBytes();

//		InterfaceParam  a    = engine_interface.addParam("A", CPUTypes.INT);
		InterfaceParam  N    = engine_interface.addParam("N", CPUTypes.INT);

//		engine_interface.setScalar(s_kernelName, "a", a);

		engine_interface.setTicks(s_kernelName, N);
		engine_interface.setStream("x",   type, N * size);
		engine_interface.setStream("y",   type, N * size);
		engine_interface.setStream("s", type, N * size);
		return engine_interface;
	}
	*/

	private void configBuild(EnvironmentMapPlayerEngineParameters params) {
		BuildConfig buildConfig = getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());
	}

	public static void main(String[] args) throws Exception {
		EnvironmentMapPlayerManager manager = new EnvironmentMapPlayerManager(new EnvironmentMapPlayerEngineParameters(args));

		manager.createSLiCinterface(memoryInitialisationInterface());

		manager.build();
	}
}
