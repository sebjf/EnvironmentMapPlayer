package environmentmapplayer;

import maxvideo.MaxVideoSignalKernel;
import maxvideo.VideoCounter;

import com.maxeler.maxcompiler.v2.kernelcompiler._KernelConfiguration;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.OptimizationTechnique;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom._CustomManagers;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.Fanout;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemCommandGroup.MemoryAccessPattern;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemInterface;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControllerConfig;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxeleros.managercompiler.core.WrapperClock;

import displaystandards.DisplayStandard;

public class EnvironmentMapPlayerManager extends CustomManager {

	public EnvironmentMapPlayerManager(EnvironmentMapPlayerEngineParameters engineParameters) throws Exception {
		super(engineParameters);

		//disable trickling

		_KernelConfiguration.getPhotonKernelConfig(getCurrentKernelConfig()).setEnableSmartKernelControl(true);

		// Configure the stream status debug blocks and the memory

		DebugLevel myDebugLevel = new DebugLevel();
		myDebugLevel.setHasStreamStatus(true);
		debug.setDebugLevel(myDebugLevel);

		config.setDefaultStreamClockFrequency(205);
		config.setOnCardMemoryFrequency(800); //400 for maia

		MemoryControllerConfig memoryConfig = new MemoryControllerConfig();
		memoryConfig.setEnableParityMode(true, true, 72, false);
		memoryConfig.setMAX4qMode(true);
		config.setMemoryControllerConfig(memoryConfig);

		// Set the display standard

		DisplayStandard displayStandard = DisplayStandard.make_RiftDK2();
		displayStandard.AddMaxFileConstants(this);
		VideoCounter.displayStandard = displayStandard;

		// Create the kernels

		KernelBlock raySampleCommandGeneratorKernel = addKernel(new RaySampleCommandGeneratorKernel(makeKernelParameters("RaySampleCommandGeneratorKernel"), displayStandard));
		KernelBlock raySampleReaderKernel = addKernel(new RaySampleReaderKernel(makeKernelParameters("RaySampleReaderKernel")));

		KernelBlock rayCasterKernel = addKernel(new RayCasterKernel(makeKernelParameters("RayCasterKernel")));

		KernelBlock commandGeneratorKernel = addKernel(new MapSampleCommandGeneratorKernel(makeKernelParameters("MapSampleCommandGeneratorKernel")));

		KernelBlock mapSampleReaderKernel = addKernel(new MapSampleReaderKernel(makeKernelParameters("MapSampleReaderKernel")));

		// Create the memory interfaces

		LMemInterface rayParameterMapDimm = addLMemInterface("rayParameterMapDimm", 1);
		LMemInterface sampleMapDimm1 = addLMemInterface("sampleMapDimm1", 1);
		LMemInterface sampleMapDimm2 = addLMemInterface("sampleMapDimm2", 1);

		// Create memory initialisation interfaces

		rayParameterMapDimm.addStreamToLMem("rayParameterMap_toMem", MemoryAccessPattern.LINEAR_1D) <== addStreamFromCPU("rayParameterMap_fromCPU", StreamMode.LOW_LATENCY_ENABLED);

		Fanout sampleDataFanout = fanout("sampleDataFanout");
		sampleDataFanout.getInput() <== addStreamFromCPU("sampleMap_fromCPU", StreamMode.LOW_LATENCY_ENABLED);
		sampleMapDimm1.addStreamToLMem("sampleMap_toDimm1", MemoryAccessPattern.LINEAR_1D) <== sampleDataFanout.addOutput("sampleMapDimm1_fromCPU_1");
		sampleMapDimm2.addStreamToLMem("sampleMap_toDimm2", MemoryAccessPattern.LINEAR_1D) <== sampleDataFanout.addOutput("sampleMapDimm1_fromCPU_2");

		/* Connect the Ray Caster to the inputs from the CPU */

		rayCasterKernel.getInput("cameraUpdates").connect(addStreamFromCPU("cameraUpdates",StreamMode.LOW_LATENCY_ENABLED));

		/* Insert the distortion/ray sample parameter kernel between the frame counters and the ray sampler inputs to modify the row and columns sampled within the camera ONB */

		rayCasterKernel.getInput("sampleParameters").connect(raySampleReaderKernel.getOutput("sampleParameters"));

		/* Connect the sample parameter command generator & reader kernels to memory */

		raySampleReaderKernel.getInput("rayParameterMap_fromMem_in").connect(rayParameterMapDimm.addStreamFromLMem("rayParameterMap_fromMem", raySampleCommandGeneratorKernel.getOutput("rayParameterMap_fromMem_cmdStream")));

		/* Connect the Ray Caster and Colour Sampling Kernels Together */

		commandGeneratorKernel.getInput("plane").connect(rayCasterKernel.getOutput("plane"));
		commandGeneratorKernel.getInput("miplevel").connect(rayCasterKernel.getOutput("miplevel"));
		commandGeneratorKernel.getInput("u").connect(rayCasterKernel.getOutput("u"));
		commandGeneratorKernel.getInput("v").connect(rayCasterKernel.getOutput("v"));

		//increase the buffer between command generator and reader, for the cache valid/sample offsets, to maximise prediction

		DFELink memorySampleCommandDimm1 = commandGeneratorKernel.getOutput("sampleMap_cmd1");
		DFELink memorySampleCommandDimm2 = commandGeneratorKernel.getOutput("sampleMap_cmd2");
		_CustomManagers.setStreamBufferSpaceRequirement(memorySampleCommandDimm1, 64 * 2048);
		_CustomManagers.setStreamBufferSpaceRequirement(memorySampleCommandDimm2, 64 * 2048);
		DFELink sampleMapDimm1Stream = sampleMapDimm1.addStreamFromLMem("sampleMap_fromDimm1", memorySampleCommandDimm1);
		DFELink sampleMapDimm2Stream = sampleMapDimm2.addStreamFromLMem("sampleMap_fromDimm2", memorySampleCommandDimm2);
		_CustomManagers.setStreamBufferSpaceRequirement(sampleMapDimm1Stream, 2048 * 2048);
		_CustomManagers.setStreamBufferSpaceRequirement(sampleMapDimm2Stream, 2048 * 2048);
		mapSampleReaderKernel.getInput("sampleMap_fromDimm1").connect(sampleMapDimm1Stream);
		mapSampleReaderKernel.getInput("sampleMap_fromDimm2").connect(sampleMapDimm2Stream);

		DFELink cache_valid_stream = commandGeneratorKernel.getOutput("cache_valid");
		mapSampleReaderKernel.getInput("cache_valid").connect(cache_valid_stream);
		int cache_valid_stream_buffer_size = 1 * 4096;
		_CustomManagers.setStreamBufferSpaceRequirement(cache_valid_stream, cache_valid_stream_buffer_size);

		DFELink dimm_stream = commandGeneratorKernel.getOutput("dimm");
		mapSampleReaderKernel.getInput("dimm").connect(dimm_stream);
		_CustomManagers.setStreamBufferSpaceRequirement(dimm_stream, 1 * 4096);

		DFELink sample_offset_in_pixels_stream = commandGeneratorKernel.getOutput("sample_offset_in_pixels");
		mapSampleReaderKernel.getInput("sample_offset_in_pixels").connect(sample_offset_in_pixels_stream);
		int sample_offset_in_pixels_stream_buffer_size = 32 * 4096;
		_CustomManagers.setStreamBufferSpaceRequirement(sample_offset_in_pixels_stream, sample_offset_in_pixels_stream_buffer_size);

		/* Create the kernel which will generate the timing data */
		KernelBlock videoSignalKernel = addKernel(new MaxVideoSignalKernel(makeKernelParameters("MaxVideoSignalKernel"), displayStandard));

		/* connect up the kernel to the colour data */
		DFELink video_colour_data_stream = mapSampleReaderKernel.getOutput("sample");
		videoSignalKernel.getInput("rgb").connect(video_colour_data_stream);
		int video_colour_data_stream_buffer_size = 24 * 2048;
		_CustomManagers.setStreamBufferSpaceRequirement(video_colour_data_stream, video_colour_data_stream_buffer_size);


		if(isTargetSimulation()){

			addStreamToCPU("displayDataOut",StreamMode.LOW_LATENCY_ENABLED).connect(videoSignalKernel.getOutput("displayDataOut"));

		}else{

			/* Finally configure the video data outputs and clocking */

			DFELink videoStreamOut = getVideoStream("videoStream", 165.0f);
			videoStreamOut.connect(videoSignalKernel.getOutput("displayDataOut"));
			WrapperClock videoStreamClk = _CustomManagers.streamToImp(videoStreamOut).getSink().getClock();
			videoSignalKernel.setClock(_CustomManagers.fromImp(videoStreamClk));
		}

		configBuild(engineParameters);

	}

	private static EngineInterface rayParameterMap_initialisation()
	{
		EngineInterface engine_interface = new EngineInterface("rayParameterMap_initialisation");

		InterfaceParam lmem_size = engine_interface.addParam("size", CPUTypes.INT64);
		InterfaceParam lmem_address = engine_interface.addParam("address", CPUTypes.INT64);
		engine_interface.setLMemLinear("rayParameterMapDimm","rayParameterMap_toMem", lmem_address, lmem_size);
		engine_interface.setStream("rayParameterMap_fromCPU", CPUTypes.UINT8, lmem_size);

		engine_interface.ignoreAll(Direction.IN_OUT);

		return engine_interface;
	}

	private static EngineInterface sampleMap_initialisation()
	{
		EngineInterface engine_interface = new EngineInterface("sampleMap_initialisation");

		InterfaceParam lmem_size = engine_interface.addParam("size", CPUTypes.INT64);
		InterfaceParam lmem_address = engine_interface.addParam("address", CPUTypes.INT64);
		engine_interface.route("sampleDataFanout -> sampleMapDimm1_fromCPU_1, sampleDataFanout -> sampleMapDimm1_fromCPU_2");
		engine_interface.setLMemLinear("sampleMapDimm1","sampleMap_toDimm1", lmem_address, lmem_size);
		engine_interface.setLMemLinear("sampleMapDimm2","sampleMap_toDimm2", lmem_address, lmem_size);
		engine_interface.setStream("sampleMap_fromCPU", CPUTypes.UINT8, lmem_size);

		engine_interface.ignoreAll(Direction.IN_OUT);

		return engine_interface;
	}


	/*
	private static EngineInterface modeDefault() {
		EngineInterface engine_interface = new EngineInterface();
		CPUTypes   type = CPUTypes.INT32;
		int        size = type.sizeInBytes();

//		InterfaceParam  a    = engine_interface.addParam("A", CPUTypes.INT);
		InterfaceParam  N    = engine_interface.addParam("N", CPUTypes.INT);

//		engine_interface.setScalar(s_kernelName, "a", a);

		engine_interface.setTicks(s_kernelName, N);
		engine_interface.setStream("x",   type, N * size);
		engine_interface.setStream("y",   type, N * size);
		engine_interface.setStream("s", type, N * size);
		return engine_interface;
	}
	*/

	private void configBuild(EnvironmentMapPlayerEngineParameters params) {
		BuildConfig buildConfig = getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(1, 30);
		buildConfig.setMPPRParallelism(6);
		buildConfig.setMPPRRetryNearMissesThreshold(500);
		buildConfig.setOptimizationGoal(OptimizationTechnique.AREA);
	}

	public static void main(String[] args) throws Exception {
		EnvironmentMapPlayerManager manager = new EnvironmentMapPlayerManager(new EnvironmentMapPlayerEngineParameters(args));

		manager.createSLiCinterface(rayParameterMap_initialisation());
		manager.createSLiCinterface(sampleMap_initialisation());

		manager.build();
	}
}
