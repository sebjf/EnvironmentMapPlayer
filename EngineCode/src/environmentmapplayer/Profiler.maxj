package environmentmapplayer;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.DelimiterMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingInput;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelObject;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

public class Profiler extends Kernel {

	private <T extends KernelObject<T>> T makeInstrumentedNonBlockingInput(String name, KernelType<T> type, DFEVar enable)
	{
		NonBlockingInput<T> input =
			io.nonBlockingInput(name, type, constant.var(true), 1, DelimiterMode.FRAME_LENGTH, 0, NonBlockingMode.NO_TRICKLING);
		T data = Reductions.streamHold(input.data, input.valid);

		DFEVar isStalling = enable & (~input.valid);
		DFEVar stoppedStalling = input.valid & ~stream.offset(input.valid, -1); //pos edge detector

		Counter sequentialStallCounter = control.count.makeCounter(control.count.makeParams(32).withEnable(isStalling).withReset(input.valid));
		DFEVar sequentialStallCount = sequentialStallCounter.getCount();

		io.scalarOutput(name + "_SequentialStalls", dfeUInt(32)).connect(Reductions.streamMax(sequentialStallCount));


		Counter stallCounter = control.count.makeCounter(control.count.makeParams(32).withEnable(isStalling));

		io.scalarOutput(name + "_Stalls", dfeUInt(32)).connect(stallCounter.getCount());


		Counter counter = control.count.makeCounter(control.count.makeParams(32));

		io.scalarOutput(name + "_Ticks", dfeUInt(32)).connect(counter.getCount());

		/*
		Memory<DFEVar> sequentialStallsList = mem.alloc(dfeUInt(32), 4096);
		sequentialStallsList.mapToCPU("sequentialStallsList");
		sequentialStallsList.write(sequentialStallsListAddress.getCount(), sequentialStallCount, stoppedStalling);
		 */

		Counter sequentialStallsListAddress = control.count.makeCounter(control.count.makeParams(12).withWrapMode(WrapMode.STOP_AT_MAX));
		io.output("profilerSequentialStallOutput", sequentialStallCount, dfeUInt(32), stoppedStalling & (sequentialStallsListAddress.getCount() < 4094));

		return data;
	}

	protected Profiler(KernelParameters parameters, int width) {
		super(parameters);

		flush.disabled();

		DFEVar data_in = makeInstrumentedNonBlockingInput("data_in", dfeRawBits(width), constant.var(1));
		io.output("data_out", data_in, dfeRawBits(width));
	}
}
