package environmentmapplayer;

import maxvideo.VideoCounter;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;

import displaystandards.DisplayStandard;

class RaySampleCommandGeneratorKernel extends Kernel {

	private static final DFEType dfefloat = dfeFloat(8, 24);

	public static final DFEStructType SampleParameters_t =
		new DFEStructType(
				DFEStructType.sft("col", dfefloat),
				DFEStructType.sft("row", dfefloat),
				DFEStructType.sft("cam_scalar", dfeInt(8)));

	protected RaySampleCommandGeneratorKernel(KernelParameters parameters, DisplayStandard displayStandard) throws Exception {
		super(parameters);

		flush.disabled();

		optimization.pushPipeliningFactor(0.25);

		VideoCounter counters = new VideoCounter(this, VideoCounter.Scope.ActiveOnly);
		DFEVar col = counters.x.cast(dfeInt(32));
		DFEVar row = counters.y.cast(dfeInt(32));

		DFEVar offset = io.scalarInput("sampleParameterMapAddress", dfeUInt(32));

		/* Compute the address (in bursts) and offset of the sample to be read */

		float burst_size_in_bytes = 384;
		int bits_per_sample = SampleParameters_t.getTotalBits();
		float bytes_per_sample = bits_per_sample / 8;
		int samples_per_burst = (int) Math.floor(burst_size_in_bytes / bytes_per_sample);

		DFEVar sample_address_in_samples = (row * displayStandard.H_Active) + col;

		DFEVar sample_address_in_bursts = offset + KernelMath.floor(sample_address_in_samples.cast(dfefloat) / samples_per_burst).cast(dfeUInt(32));
		DFEVar sample_offset_into_burst_in_samples = KernelMath.modulo(sample_address_in_samples, samples_per_burst);


		/* Read the memory, keeping track of what burst address is in the current cache */

        DFEVar previous_address_in_bursts = stream.offset(sample_address_in_bursts, -1);
        DFEVar cache_valid = previous_address_in_bursts.eq(sample_address_in_bursts);

		LMemCommandStream.makeKernelOutput(
				"sample_parameter_read_command",
				~cache_valid,
				sample_address_in_bursts.cast(dfeUInt(28)),
				constant.var(dfeUInt(8),1),
				constant.var(dfeUInt(7),1),
				constant.var(dfeUInt(4),0),
				constant.var(false));

		io.output("cache_valid", dfeBool()) <== cache_valid;

		io.output("sample_offset_into_burst_in_samples", dfeUInt(32)) <== sample_offset_into_burst_in_samples.cast(dfeUInt(32));

		optimization.popPipeliningFactor();

	}

}
